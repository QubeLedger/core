syntax = "proto3";
package core.perpetual.v1beta1;

import "gogoproto/gogo.proto";
import "core/perpetual/v1beta1/params.proto";
import "google/api/annotations.proto";
import "core/perpetual/v1beta1/perpetual.proto";
option go_package = "github.com/QuadrateOrg/core/x/perpetual/types";

// Query defines the gRPC querier service.
service Query {
        rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
                option (google.api.http).get = "/core/perpetual/v1beta1/params";
        }

        rpc PositionById(QueryPositionByIdRequest) returns (QueryPositionByIdResponse) {
                option (google.api.http).get = "/core/perpetual/v1beta1/position/{id}";
        }

        rpc VaultById(QueryVaultByIdRequest) returns (QueryVaultByIdResponse) {
                option (google.api.http).get = "/core/perpetual/v1beta1/vault/{id}";
        }

        rpc AllPositions(QueryEmpty) returns (QueryAllPositionsResponse) {
                option (google.api.http).get = "/core/perpetual/v1beta1/positions";
        }

        rpc AllVaults(QueryEmpty) returns (QueryAllVaultsResponse) {
                option (google.api.http).get = "/core/perpetual/v1beta1/vaults";
        }
}

message QueryParamsRequest {}

message QueryParamsResponse {
        Params params = 1;
}

message QueryPositionByIdRequest {
        string id = 1;
}

message QueryPositionByIdResponse {
        TradePosition position = 1;
}

message QueryVaultByIdRequest {
        string id = 1;
}

message QueryVaultByIdResponse {
        Vault vault = 1;
}

message QueryEmpty {}

message QueryAllPositionsResponse {
        repeated TradePosition positions = 1;
}

message QueryAllVaultsResponse {
        repeated Vault vaults = 1;
}