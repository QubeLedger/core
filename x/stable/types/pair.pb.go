// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core/stable/v1beta1/pair.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Pair struct {
	Id                     uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PairId                 string                                 `protobuf:"bytes,2,opt,name=pairId,proto3" json:"pairId,omitempty"`
	AmountInMetadata       types.Metadata                         `protobuf:"bytes,3,opt,name=amountInMetadata,proto3" json:"amountInMetadata" yaml:"amountInMetadata"`
	TokenStakeMetadata     types.Metadata                         `protobuf:"bytes,4,opt,name=tokenStakeMetadata,proto3" json:"tokenStakeMetadata" yaml:"tokenStakeMetadata"`
	TokenYMetadata         types.Metadata                         `protobuf:"bytes,5,opt,name=tokenYMetadata,proto3" json:"tokenYMetadata" yaml:"tokenYMetadata"`
	AmountOutMetadata      types.Metadata                         `protobuf:"bytes,6,opt,name=amountOutMetadata,proto3" json:"amountOutMetadata" yaml:"amountOutMetadata"`
	Qm                     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=qm,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"qm" yaml:"qm"`
	Ar                     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=ar,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"ar" yaml:"ar"`
	OracleAssetId          string                                 `protobuf:"bytes,9,opt,name=oracleAssetId,proto3" json:"oracleAssetId,omitempty"`
	PerpetualOracleAssetId string                                 `protobuf:"bytes,10,opt,name=perpetualOracleAssetId,proto3" json:"perpetualOracleAssetId,omitempty"`
	MinAmountIn            string                                 `protobuf:"bytes,11,opt,name=minAmountIn,proto3" json:"minAmountIn,omitempty"`
	MinAmountOut           string                                 `protobuf:"bytes,12,opt,name=minAmountOut,proto3" json:"minAmountOut,omitempty"`
	Model                  string                                 `protobuf:"bytes,13,opt,name=model,proto3" json:"model,omitempty"`
}

func (m *Pair) Reset()         { *m = Pair{} }
func (m *Pair) String() string { return proto.CompactTextString(m) }
func (*Pair) ProtoMessage()    {}
func (*Pair) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e43a29cf406037d, []int{0}
}
func (m *Pair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pair.Merge(m, src)
}
func (m *Pair) XXX_Size() int {
	return m.Size()
}
func (m *Pair) XXX_DiscardUnknown() {
	xxx_messageInfo_Pair.DiscardUnknown(m)
}

var xxx_messageInfo_Pair proto.InternalMessageInfo

func (m *Pair) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Pair) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *Pair) GetAmountInMetadata() types.Metadata {
	if m != nil {
		return m.AmountInMetadata
	}
	return types.Metadata{}
}

func (m *Pair) GetTokenStakeMetadata() types.Metadata {
	if m != nil {
		return m.TokenStakeMetadata
	}
	return types.Metadata{}
}

func (m *Pair) GetTokenYMetadata() types.Metadata {
	if m != nil {
		return m.TokenYMetadata
	}
	return types.Metadata{}
}

func (m *Pair) GetAmountOutMetadata() types.Metadata {
	if m != nil {
		return m.AmountOutMetadata
	}
	return types.Metadata{}
}

func (m *Pair) GetOracleAssetId() string {
	if m != nil {
		return m.OracleAssetId
	}
	return ""
}

func (m *Pair) GetPerpetualOracleAssetId() string {
	if m != nil {
		return m.PerpetualOracleAssetId
	}
	return ""
}

func (m *Pair) GetMinAmountIn() string {
	if m != nil {
		return m.MinAmountIn
	}
	return ""
}

func (m *Pair) GetMinAmountOut() string {
	if m != nil {
		return m.MinAmountOut
	}
	return ""
}

func (m *Pair) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func init() {
	proto.RegisterType((*Pair)(nil), "core.stable.v1beta1.Pair")
}

func init() { proto.RegisterFile("core/stable/v1beta1/pair.proto", fileDescriptor_7e43a29cf406037d) }

var fileDescriptor_7e43a29cf406037d = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x41, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0x63, 0x93, 0x06, 0x32, 0x69, 0x2b, 0x18, 0x4a, 0x19, 0x2a, 0xd5, 0x36, 0x16, 0x42,
	0x11, 0x12, 0xb6, 0x0a, 0x12, 0x0b, 0x58, 0x35, 0x62, 0x13, 0x21, 0x14, 0x30, 0xab, 0xb2, 0x7b,
	0x8e, 0x47, 0xc1, 0xc4, 0xe3, 0x71, 0xc6, 0x63, 0x44, 0x6f, 0xc1, 0x65, 0xb8, 0x43, 0x97, 0x5d,
	0x22, 0x16, 0x11, 0x4a, 0x6e, 0xd0, 0x13, 0x20, 0xcf, 0xb8, 0xc6, 0x49, 0x40, 0x8a, 0xc4, 0xca,
	0x7e, 0xef, 0x7f, 0xfa, 0x3e, 0x79, 0x3c, 0x0f, 0x59, 0x63, 0x2e, 0xa8, 0x9f, 0x4b, 0x08, 0x13,
	0xea, 0x7f, 0x39, 0x09, 0xa9, 0x84, 0x13, 0x3f, 0x83, 0x58, 0x78, 0x99, 0xe0, 0x92, 0xe3, 0xbb,
	0x65, 0xee, 0xe9, 0xdc, 0xab, 0xf2, 0xa3, 0x83, 0x09, 0x9f, 0x70, 0x95, 0xfb, 0xe5, 0x9b, 0x1e,
	0x3d, 0xb2, 0xc6, 0x3c, 0x67, 0x3c, 0xf7, 0x43, 0x48, 0xa7, 0x35, 0xaa, 0x2c, 0x74, 0xee, 0x7e,
	0xef, 0xa0, 0xf6, 0x3b, 0x88, 0x05, 0xde, 0x47, 0x66, 0x1c, 0x11, 0xc3, 0x31, 0xfa, 0xed, 0xc0,
	0x8c, 0x23, 0x7c, 0x88, 0x3a, 0xa5, 0x71, 0x18, 0x11, 0xd3, 0x31, 0xfa, 0xdd, 0xa0, 0xaa, 0xf0,
	0x67, 0x74, 0x1b, 0x18, 0x2f, 0x52, 0x39, 0x4c, 0xdf, 0x52, 0x09, 0x11, 0x48, 0x20, 0x37, 0x1c,
	0xa3, 0xdf, 0x7b, 0x76, 0xec, 0x69, 0x97, 0xa7, 0xf0, 0x95, 0xcb, 0xbb, 0x1e, 0x1a, 0xd8, 0x17,
	0x73, 0xbb, 0x75, 0x35, 0xb7, 0xef, 0x9f, 0x03, 0x4b, 0x5e, 0xba, 0xeb, 0x10, 0x37, 0xd8, 0xe0,
	0xe2, 0x0c, 0x61, 0xc9, 0xa7, 0x34, 0xfd, 0x20, 0x61, 0x4a, 0x6b, 0x5b, 0x7b, 0x1b, 0xdb, 0xc3,
	0xca, 0xf6, 0x40, 0xdb, 0x36, 0x31, 0x6e, 0xf0, 0x17, 0x36, 0x8e, 0xd0, 0xbe, 0xea, 0x9e, 0xd5,
	0xb6, 0x9d, 0x6d, 0x6c, 0xc7, 0x95, 0xed, 0x5e, 0xc3, 0x76, 0xf6, 0xc7, 0xb4, 0xc6, 0xc4, 0x0c,
	0xdd, 0xd1, 0xdf, 0x3a, 0x2a, 0x64, 0x2d, 0xea, 0x6c, 0x23, 0x72, 0x2a, 0x11, 0x69, 0x1e, 0x62,
	0x83, 0xe2, 0x06, 0x9b, 0x64, 0xfc, 0x06, 0x99, 0x33, 0x46, 0x6e, 0x96, 0xbf, 0x71, 0xf0, 0xaa,
	0x04, 0xfc, 0x9c, 0xdb, 0x8f, 0x27, 0xb1, 0xfc, 0x54, 0x84, 0xde, 0x98, 0x33, 0xbf, 0xba, 0x22,
	0xfa, 0xf1, 0x34, 0x8f, 0xa6, 0xbe, 0x3c, 0xcf, 0x68, 0xee, 0x0d, 0x53, 0x79, 0x35, 0xb7, 0xbb,
	0x5a, 0x35, 0x63, 0x6e, 0x60, 0xce, 0x58, 0x09, 0x03, 0x41, 0x6e, 0xfd, 0x1f, 0x0c, 0x84, 0x1b,
	0x98, 0x20, 0xf0, 0x23, 0xb4, 0xc7, 0x05, 0x8c, 0x13, 0x7a, 0x9a, 0xe7, 0x54, 0x0e, 0x23, 0xd2,
	0x55, 0x77, 0x6d, 0xb5, 0x89, 0x5f, 0xa0, 0xc3, 0x8c, 0x8a, 0x8c, 0xca, 0x02, 0x92, 0xd1, 0xca,
	0x38, 0x52, 0xe3, 0xff, 0x48, 0xb1, 0x83, 0x7a, 0x2c, 0x4e, 0x4f, 0xab, 0x5b, 0x45, 0x7a, 0x6a,
	0xb8, 0xd9, 0xc2, 0x2e, 0xda, 0xad, 0xcb, 0x51, 0x21, 0xc9, 0xae, 0x1a, 0x59, 0xe9, 0xe1, 0x03,
	0xb4, 0xc3, 0x78, 0x44, 0x13, 0xb2, 0xa7, 0x42, 0x5d, 0x0c, 0x5e, 0x5f, 0x2c, 0x2c, 0xe3, 0x72,
	0x61, 0x19, 0xbf, 0x16, 0x96, 0xf1, 0x6d, 0x69, 0xb5, 0x2e, 0x97, 0x56, 0xeb, 0xc7, 0xd2, 0x6a,
	0x7d, 0x7c, 0xd2, 0x38, 0x8c, 0xf7, 0x05, 0x44, 0x02, 0x24, 0x1d, 0x89, 0x89, 0xaf, 0x76, 0xfa,
	0xeb, 0xf5, 0x56, 0xab, 0x43, 0x09, 0x3b, 0x6a, 0x09, 0x9f, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x0b, 0x6a, 0xf9, 0x03, 0xf1, 0x03, 0x00, 0x00,
}

func (m *Pair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintPair(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.MinAmountOut) > 0 {
		i -= len(m.MinAmountOut)
		copy(dAtA[i:], m.MinAmountOut)
		i = encodeVarintPair(dAtA, i, uint64(len(m.MinAmountOut)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.MinAmountIn) > 0 {
		i -= len(m.MinAmountIn)
		copy(dAtA[i:], m.MinAmountIn)
		i = encodeVarintPair(dAtA, i, uint64(len(m.MinAmountIn)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PerpetualOracleAssetId) > 0 {
		i -= len(m.PerpetualOracleAssetId)
		copy(dAtA[i:], m.PerpetualOracleAssetId)
		i = encodeVarintPair(dAtA, i, uint64(len(m.PerpetualOracleAssetId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.OracleAssetId) > 0 {
		i -= len(m.OracleAssetId)
		copy(dAtA[i:], m.OracleAssetId)
		i = encodeVarintPair(dAtA, i, uint64(len(m.OracleAssetId)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size := m.Ar.Size()
		i -= size
		if _, err := m.Ar.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.Qm.Size()
		i -= size
		if _, err := m.Qm.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.AmountOutMetadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPair(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.TokenYMetadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPair(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.TokenStakeMetadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPair(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.AmountInMetadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPair(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintPair(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPair(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPair(dAtA []byte, offset int, v uint64) int {
	offset -= sovPair(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPair(uint64(m.Id))
	}
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	l = m.AmountInMetadata.Size()
	n += 1 + l + sovPair(uint64(l))
	l = m.TokenStakeMetadata.Size()
	n += 1 + l + sovPair(uint64(l))
	l = m.TokenYMetadata.Size()
	n += 1 + l + sovPair(uint64(l))
	l = m.AmountOutMetadata.Size()
	n += 1 + l + sovPair(uint64(l))
	l = m.Qm.Size()
	n += 1 + l + sovPair(uint64(l))
	l = m.Ar.Size()
	n += 1 + l + sovPair(uint64(l))
	l = len(m.OracleAssetId)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	l = len(m.PerpetualOracleAssetId)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	l = len(m.MinAmountIn)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	l = len(m.MinAmountOut)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	return n
}

func sovPair(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPair(x uint64) (n int) {
	return sovPair(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountInMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountInMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenStakeMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenStakeMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenYMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenYMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOutMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountOutMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Qm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualOracleAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PerpetualOracleAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinAmountIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinAmountOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPair(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPair
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPair
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPair
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPair
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPair        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPair          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPair = fmt.Errorf("proto: unexpected end of group")
)
