// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core/grow/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	grpc1 "github.com/gogo/protobuf/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

//
//AssetByAssetId
type QueryAssetByAssetIdRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryAssetByAssetIdRequest) Reset()         { *m = QueryAssetByAssetIdRequest{} }
func (m *QueryAssetByAssetIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAssetByAssetIdRequest) ProtoMessage()    {}
func (*QueryAssetByAssetIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{2}
}
func (m *QueryAssetByAssetIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetByAssetIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetByAssetIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetByAssetIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetByAssetIdRequest.Merge(m, src)
}
func (m *QueryAssetByAssetIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetByAssetIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetByAssetIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetByAssetIdRequest proto.InternalMessageInfo

func (m *QueryAssetByAssetIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryAssetByAssetIdResponse struct {
	Asset Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset"`
}

func (m *QueryAssetByAssetIdResponse) Reset()         { *m = QueryAssetByAssetIdResponse{} }
func (m *QueryAssetByAssetIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssetByAssetIdResponse) ProtoMessage()    {}
func (*QueryAssetByAssetIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{3}
}
func (m *QueryAssetByAssetIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetByAssetIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetByAssetIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetByAssetIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetByAssetIdResponse.Merge(m, src)
}
func (m *QueryAssetByAssetIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetByAssetIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetByAssetIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetByAssetIdResponse proto.InternalMessageInfo

func (m *QueryAssetByAssetIdResponse) GetAsset() Asset {
	if m != nil {
		return m.Asset
	}
	return Asset{}
}

//
//GetAllAssets
type QueryGetAllAssetsRequest struct {
}

func (m *QueryGetAllAssetsRequest) Reset()         { *m = QueryGetAllAssetsRequest{} }
func (m *QueryGetAllAssetsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllAssetsRequest) ProtoMessage()    {}
func (*QueryGetAllAssetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{4}
}
func (m *QueryGetAllAssetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllAssetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllAssetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllAssetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllAssetsRequest.Merge(m, src)
}
func (m *QueryGetAllAssetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllAssetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllAssetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllAssetsRequest proto.InternalMessageInfo

type QueryGetAllAssetsResponse struct {
	Assets []Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets"`
}

func (m *QueryGetAllAssetsResponse) Reset()         { *m = QueryGetAllAssetsResponse{} }
func (m *QueryGetAllAssetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllAssetsResponse) ProtoMessage()    {}
func (*QueryGetAllAssetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{5}
}
func (m *QueryGetAllAssetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllAssetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllAssetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllAssetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllAssetsResponse.Merge(m, src)
}
func (m *QueryGetAllAssetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllAssetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllAssetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllAssetsResponse proto.InternalMessageInfo

func (m *QueryGetAllAssetsResponse) GetAssets() []Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

//
//PositionById
type QueryPositionByIdRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryPositionByIdRequest) Reset()         { *m = QueryPositionByIdRequest{} }
func (m *QueryPositionByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPositionByIdRequest) ProtoMessage()    {}
func (*QueryPositionByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{6}
}
func (m *QueryPositionByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionByIdRequest.Merge(m, src)
}
func (m *QueryPositionByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionByIdRequest proto.InternalMessageInfo

func (m *QueryPositionByIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryPositionResponse struct {
	Position Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position"`
}

func (m *QueryPositionResponse) Reset()         { *m = QueryPositionResponse{} }
func (m *QueryPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPositionResponse) ProtoMessage()    {}
func (*QueryPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{7}
}
func (m *QueryPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionResponse.Merge(m, src)
}
func (m *QueryPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionResponse proto.InternalMessageInfo

func (m *QueryPositionResponse) GetPosition() Position {
	if m != nil {
		return m.Position
	}
	return Position{}
}

//
//PositionByCreator
type QueryPositionByCreatorRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *QueryPositionByCreatorRequest) Reset()         { *m = QueryPositionByCreatorRequest{} }
func (m *QueryPositionByCreatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPositionByCreatorRequest) ProtoMessage()    {}
func (*QueryPositionByCreatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{8}
}
func (m *QueryPositionByCreatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionByCreatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionByCreatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionByCreatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionByCreatorRequest.Merge(m, src)
}
func (m *QueryPositionByCreatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionByCreatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionByCreatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionByCreatorRequest proto.InternalMessageInfo

func (m *QueryPositionByCreatorRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

//
//AllPosition
type QueryAllPositionRequest struct {
}

func (m *QueryAllPositionRequest) Reset()         { *m = QueryAllPositionRequest{} }
func (m *QueryAllPositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPositionRequest) ProtoMessage()    {}
func (*QueryAllPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{9}
}
func (m *QueryAllPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPositionRequest.Merge(m, src)
}
func (m *QueryAllPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPositionRequest proto.InternalMessageInfo

type QueryAllPositionResponse struct {
	Positions []Position `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions"`
}

func (m *QueryAllPositionResponse) Reset()         { *m = QueryAllPositionResponse{} }
func (m *QueryAllPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPositionResponse) ProtoMessage()    {}
func (*QueryAllPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{10}
}
func (m *QueryAllPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPositionResponse.Merge(m, src)
}
func (m *QueryAllPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPositionResponse proto.InternalMessageInfo

func (m *QueryAllPositionResponse) GetPositions() []Position {
	if m != nil {
		return m.Positions
	}
	return nil
}

//
//AllLiquidatorPosition
type QueryAllLiquidatorPositionRequest struct {
}

func (m *QueryAllLiquidatorPositionRequest) Reset()         { *m = QueryAllLiquidatorPositionRequest{} }
func (m *QueryAllLiquidatorPositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLiquidatorPositionRequest) ProtoMessage()    {}
func (*QueryAllLiquidatorPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{11}
}
func (m *QueryAllLiquidatorPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLiquidatorPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLiquidatorPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLiquidatorPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLiquidatorPositionRequest.Merge(m, src)
}
func (m *QueryAllLiquidatorPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLiquidatorPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLiquidatorPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLiquidatorPositionRequest proto.InternalMessageInfo

type QueryAllLiquidatorPositionResponse struct {
	LiquidatorsPosition []LiquidatorPosition `protobuf:"bytes,1,rep,name=liquidators_position,json=liquidatorsPosition,proto3" json:"liquidators_position"`
}

func (m *QueryAllLiquidatorPositionResponse) Reset()         { *m = QueryAllLiquidatorPositionResponse{} }
func (m *QueryAllLiquidatorPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLiquidatorPositionResponse) ProtoMessage()    {}
func (*QueryAllLiquidatorPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{12}
}
func (m *QueryAllLiquidatorPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLiquidatorPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLiquidatorPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLiquidatorPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLiquidatorPositionResponse.Merge(m, src)
}
func (m *QueryAllLiquidatorPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLiquidatorPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLiquidatorPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLiquidatorPositionResponse proto.InternalMessageInfo

func (m *QueryAllLiquidatorPositionResponse) GetLiquidatorsPosition() []LiquidatorPosition {
	if m != nil {
		return m.LiquidatorsPosition
	}
	return nil
}

//
//LiquidatorPositionByCreator
type QueryLiquidatorPositionByCreatorRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *QueryLiquidatorPositionByCreatorRequest) Reset() {
	*m = QueryLiquidatorPositionByCreatorRequest{}
}
func (m *QueryLiquidatorPositionByCreatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidatorPositionByCreatorRequest) ProtoMessage()    {}
func (*QueryLiquidatorPositionByCreatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{13}
}
func (m *QueryLiquidatorPositionByCreatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidatorPositionByCreatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidatorPositionByCreatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidatorPositionByCreatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidatorPositionByCreatorRequest.Merge(m, src)
}
func (m *QueryLiquidatorPositionByCreatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidatorPositionByCreatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidatorPositionByCreatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidatorPositionByCreatorRequest proto.InternalMessageInfo

func (m *QueryLiquidatorPositionByCreatorRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type QueryLiquidatorPositionByCreatorResponse struct {
	Position []LiquidatorPosition `protobuf:"bytes,1,rep,name=position,proto3" json:"position"`
}

func (m *QueryLiquidatorPositionByCreatorResponse) Reset() {
	*m = QueryLiquidatorPositionByCreatorResponse{}
}
func (m *QueryLiquidatorPositionByCreatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidatorPositionByCreatorResponse) ProtoMessage()    {}
func (*QueryLiquidatorPositionByCreatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{14}
}
func (m *QueryLiquidatorPositionByCreatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidatorPositionByCreatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidatorPositionByCreatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidatorPositionByCreatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidatorPositionByCreatorResponse.Merge(m, src)
}
func (m *QueryLiquidatorPositionByCreatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidatorPositionByCreatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidatorPositionByCreatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidatorPositionByCreatorResponse proto.InternalMessageInfo

func (m *QueryLiquidatorPositionByCreatorResponse) GetPosition() []LiquidatorPosition {
	if m != nil {
		return m.Position
	}
	return nil
}

//
//LiquidatorPositionById
type QueryLiquidatorPositionByIdRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryLiquidatorPositionByIdRequest) Reset()         { *m = QueryLiquidatorPositionByIdRequest{} }
func (m *QueryLiquidatorPositionByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidatorPositionByIdRequest) ProtoMessage()    {}
func (*QueryLiquidatorPositionByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{15}
}
func (m *QueryLiquidatorPositionByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidatorPositionByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidatorPositionByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidatorPositionByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidatorPositionByIdRequest.Merge(m, src)
}
func (m *QueryLiquidatorPositionByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidatorPositionByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidatorPositionByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidatorPositionByIdRequest proto.InternalMessageInfo

func (m *QueryLiquidatorPositionByIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryLiquidatorPositionByIdResponse struct {
	LiquidatorsPosition LiquidatorPosition `protobuf:"bytes,1,opt,name=liquidators_position,json=liquidatorsPosition,proto3" json:"liquidators_position"`
}

func (m *QueryLiquidatorPositionByIdResponse) Reset()         { *m = QueryLiquidatorPositionByIdResponse{} }
func (m *QueryLiquidatorPositionByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidatorPositionByIdResponse) ProtoMessage()    {}
func (*QueryLiquidatorPositionByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{16}
}
func (m *QueryLiquidatorPositionByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidatorPositionByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidatorPositionByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidatorPositionByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidatorPositionByIdResponse.Merge(m, src)
}
func (m *QueryLiquidatorPositionByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidatorPositionByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidatorPositionByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidatorPositionByIdResponse proto.InternalMessageInfo

func (m *QueryLiquidatorPositionByIdResponse) GetLiquidatorsPosition() LiquidatorPosition {
	if m != nil {
		return m.LiquidatorsPosition
	}
	return LiquidatorPosition{}
}

//
//LoanById
type QueryLoanByIdRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryLoanByIdRequest) Reset()         { *m = QueryLoanByIdRequest{} }
func (m *QueryLoanByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLoanByIdRequest) ProtoMessage()    {}
func (*QueryLoanByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{17}
}
func (m *QueryLoanByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoanByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoanByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoanByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoanByIdRequest.Merge(m, src)
}
func (m *QueryLoanByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoanByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoanByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoanByIdRequest proto.InternalMessageInfo

func (m *QueryLoanByIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryLoanByIdResponse struct {
	Loan Loan `protobuf:"bytes,1,opt,name=loan,proto3" json:"loan"`
}

func (m *QueryLoanByIdResponse) Reset()         { *m = QueryLoanByIdResponse{} }
func (m *QueryLoanByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLoanByIdResponse) ProtoMessage()    {}
func (*QueryLoanByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{18}
}
func (m *QueryLoanByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoanByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoanByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoanByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoanByIdResponse.Merge(m, src)
}
func (m *QueryLoanByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoanByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoanByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoanByIdResponse proto.InternalMessageInfo

func (m *QueryLoanByIdResponse) GetLoan() Loan {
	if m != nil {
		return m.Loan
	}
	return Loan{}
}

//
//LendById
type QueryLendByIdRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryLendByIdRequest) Reset()         { *m = QueryLendByIdRequest{} }
func (m *QueryLendByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLendByIdRequest) ProtoMessage()    {}
func (*QueryLendByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{19}
}
func (m *QueryLendByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLendByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLendByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLendByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLendByIdRequest.Merge(m, src)
}
func (m *QueryLendByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLendByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLendByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLendByIdRequest proto.InternalMessageInfo

func (m *QueryLendByIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryLendByIdResponse struct {
	Lend Lend `protobuf:"bytes,1,opt,name=lend,proto3" json:"lend"`
}

func (m *QueryLendByIdResponse) Reset()         { *m = QueryLendByIdResponse{} }
func (m *QueryLendByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLendByIdResponse) ProtoMessage()    {}
func (*QueryLendByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{20}
}
func (m *QueryLendByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLendByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLendByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLendByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLendByIdResponse.Merge(m, src)
}
func (m *QueryLendByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLendByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLendByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLendByIdResponse proto.InternalMessageInfo

func (m *QueryLendByIdResponse) GetLend() Lend {
	if m != nil {
		return m.Lend
	}
	return Lend{}
}

//
//YieldPercentage
type QueryYieldPercentageRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryYieldPercentageRequest) Reset()         { *m = QueryYieldPercentageRequest{} }
func (m *QueryYieldPercentageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryYieldPercentageRequest) ProtoMessage()    {}
func (*QueryYieldPercentageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{21}
}
func (m *QueryYieldPercentageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryYieldPercentageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryYieldPercentageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryYieldPercentageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryYieldPercentageRequest.Merge(m, src)
}
func (m *QueryYieldPercentageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryYieldPercentageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryYieldPercentageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryYieldPercentageRequest proto.InternalMessageInfo

func (m *QueryYieldPercentageRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryYieldPercentageResponse struct {
	RealRate     int64  `protobuf:"varint,1,opt,name=RealRate,proto3" json:"RealRate,omitempty"`
	BorrowRate   int64  `protobuf:"varint,2,opt,name=BorrowRate,proto3" json:"BorrowRate,omitempty"`
	RealYield    int64  `protobuf:"varint,3,opt,name=RealYield,proto3" json:"RealYield,omitempty"`
	GrowYield    int64  `protobuf:"varint,4,opt,name=GrowYield,proto3" json:"GrowYield,omitempty"`
	ActualAction string `protobuf:"bytes,5,opt,name=ActualAction,proto3" json:"ActualAction,omitempty"`
	Difference   int64  `protobuf:"varint,6,opt,name=Difference,proto3" json:"Difference,omitempty"`
}

func (m *QueryYieldPercentageResponse) Reset()         { *m = QueryYieldPercentageResponse{} }
func (m *QueryYieldPercentageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryYieldPercentageResponse) ProtoMessage()    {}
func (*QueryYieldPercentageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{22}
}
func (m *QueryYieldPercentageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryYieldPercentageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryYieldPercentageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryYieldPercentageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryYieldPercentageResponse.Merge(m, src)
}
func (m *QueryYieldPercentageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryYieldPercentageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryYieldPercentageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryYieldPercentageResponse proto.InternalMessageInfo

func (m *QueryYieldPercentageResponse) GetRealRate() int64 {
	if m != nil {
		return m.RealRate
	}
	return 0
}

func (m *QueryYieldPercentageResponse) GetBorrowRate() int64 {
	if m != nil {
		return m.BorrowRate
	}
	return 0
}

func (m *QueryYieldPercentageResponse) GetRealYield() int64 {
	if m != nil {
		return m.RealYield
	}
	return 0
}

func (m *QueryYieldPercentageResponse) GetGrowYield() int64 {
	if m != nil {
		return m.GrowYield
	}
	return 0
}

func (m *QueryYieldPercentageResponse) GetActualAction() string {
	if m != nil {
		return m.ActualAction
	}
	return ""
}

func (m *QueryYieldPercentageResponse) GetDifference() int64 {
	if m != nil {
		return m.Difference
	}
	return 0
}

//
//PairByDenomId
type PairByDenomIdRequest struct {
	DenomId string `protobuf:"bytes,1,opt,name=denomId,proto3" json:"denomId,omitempty"`
}

func (m *PairByDenomIdRequest) Reset()         { *m = PairByDenomIdRequest{} }
func (m *PairByDenomIdRequest) String() string { return proto.CompactTextString(m) }
func (*PairByDenomIdRequest) ProtoMessage()    {}
func (*PairByDenomIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{23}
}
func (m *PairByDenomIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PairByDenomIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PairByDenomIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PairByDenomIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairByDenomIdRequest.Merge(m, src)
}
func (m *PairByDenomIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *PairByDenomIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PairByDenomIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PairByDenomIdRequest proto.InternalMessageInfo

func (m *PairByDenomIdRequest) GetDenomId() string {
	if m != nil {
		return m.DenomId
	}
	return ""
}

type PairByDenomIdResponse struct {
	Pair *GTokenPair `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
}

func (m *PairByDenomIdResponse) Reset()         { *m = PairByDenomIdResponse{} }
func (m *PairByDenomIdResponse) String() string { return proto.CompactTextString(m) }
func (*PairByDenomIdResponse) ProtoMessage()    {}
func (*PairByDenomIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{24}
}
func (m *PairByDenomIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PairByDenomIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PairByDenomIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PairByDenomIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairByDenomIdResponse.Merge(m, src)
}
func (m *PairByDenomIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *PairByDenomIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PairByDenomIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PairByDenomIdResponse proto.InternalMessageInfo

func (m *PairByDenomIdResponse) GetPair() *GTokenPair {
	if m != nil {
		return m.Pair
	}
	return nil
}

//
//AllPairs
type AllPairsRequest struct {
}

func (m *AllPairsRequest) Reset()         { *m = AllPairsRequest{} }
func (m *AllPairsRequest) String() string { return proto.CompactTextString(m) }
func (*AllPairsRequest) ProtoMessage()    {}
func (*AllPairsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{25}
}
func (m *AllPairsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllPairsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllPairsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllPairsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllPairsRequest.Merge(m, src)
}
func (m *AllPairsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllPairsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllPairsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllPairsRequest proto.InternalMessageInfo

type AllPairsResponse struct {
	Pairs []*GTokenPair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (m *AllPairsResponse) Reset()         { *m = AllPairsResponse{} }
func (m *AllPairsResponse) String() string { return proto.CompactTextString(m) }
func (*AllPairsResponse) ProtoMessage()    {}
func (*AllPairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{26}
}
func (m *AllPairsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllPairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllPairsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllPairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllPairsResponse.Merge(m, src)
}
func (m *AllPairsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AllPairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllPairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllPairsResponse proto.InternalMessageInfo

func (m *AllPairsResponse) GetPairs() []*GTokenPair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "core.grow.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "core.grow.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryAssetByAssetIdRequest)(nil), "core.grow.v1beta1.QueryAssetByAssetIdRequest")
	proto.RegisterType((*QueryAssetByAssetIdResponse)(nil), "core.grow.v1beta1.QueryAssetByAssetIdResponse")
	proto.RegisterType((*QueryGetAllAssetsRequest)(nil), "core.grow.v1beta1.QueryGetAllAssetsRequest")
	proto.RegisterType((*QueryGetAllAssetsResponse)(nil), "core.grow.v1beta1.QueryGetAllAssetsResponse")
	proto.RegisterType((*QueryPositionByIdRequest)(nil), "core.grow.v1beta1.QueryPositionByIdRequest")
	proto.RegisterType((*QueryPositionResponse)(nil), "core.grow.v1beta1.QueryPositionResponse")
	proto.RegisterType((*QueryPositionByCreatorRequest)(nil), "core.grow.v1beta1.QueryPositionByCreatorRequest")
	proto.RegisterType((*QueryAllPositionRequest)(nil), "core.grow.v1beta1.QueryAllPositionRequest")
	proto.RegisterType((*QueryAllPositionResponse)(nil), "core.grow.v1beta1.QueryAllPositionResponse")
	proto.RegisterType((*QueryAllLiquidatorPositionRequest)(nil), "core.grow.v1beta1.QueryAllLiquidatorPositionRequest")
	proto.RegisterType((*QueryAllLiquidatorPositionResponse)(nil), "core.grow.v1beta1.QueryAllLiquidatorPositionResponse")
	proto.RegisterType((*QueryLiquidatorPositionByCreatorRequest)(nil), "core.grow.v1beta1.QueryLiquidatorPositionByCreatorRequest")
	proto.RegisterType((*QueryLiquidatorPositionByCreatorResponse)(nil), "core.grow.v1beta1.QueryLiquidatorPositionByCreatorResponse")
	proto.RegisterType((*QueryLiquidatorPositionByIdRequest)(nil), "core.grow.v1beta1.QueryLiquidatorPositionByIdRequest")
	proto.RegisterType((*QueryLiquidatorPositionByIdResponse)(nil), "core.grow.v1beta1.QueryLiquidatorPositionByIdResponse")
	proto.RegisterType((*QueryLoanByIdRequest)(nil), "core.grow.v1beta1.QueryLoanByIdRequest")
	proto.RegisterType((*QueryLoanByIdResponse)(nil), "core.grow.v1beta1.QueryLoanByIdResponse")
	proto.RegisterType((*QueryLendByIdRequest)(nil), "core.grow.v1beta1.QueryLendByIdRequest")
	proto.RegisterType((*QueryLendByIdResponse)(nil), "core.grow.v1beta1.QueryLendByIdResponse")
	proto.RegisterType((*QueryYieldPercentageRequest)(nil), "core.grow.v1beta1.QueryYieldPercentageRequest")
	proto.RegisterType((*QueryYieldPercentageResponse)(nil), "core.grow.v1beta1.QueryYieldPercentageResponse")
	proto.RegisterType((*PairByDenomIdRequest)(nil), "core.grow.v1beta1.PairByDenomIdRequest")
	proto.RegisterType((*PairByDenomIdResponse)(nil), "core.grow.v1beta1.PairByDenomIdResponse")
	proto.RegisterType((*AllPairsRequest)(nil), "core.grow.v1beta1.AllPairsRequest")
	proto.RegisterType((*AllPairsResponse)(nil), "core.grow.v1beta1.AllPairsResponse")
}

func init() { proto.RegisterFile("core/grow/v1beta1/query.proto", fileDescriptor_fc51b5096e6b6c92) }

var fileDescriptor_fc51b5096e6b6c92 = []byte{
	// 1222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5f, 0x6f, 0xdc, 0x44,
	0x10, 0x8f, 0xf3, 0xaf, 0xc9, 0x34, 0xb4, 0xcd, 0x36, 0xa5, 0x17, 0xe7, 0x72, 0x4d, 0x1c, 0xda,
	0xa4, 0x69, 0x73, 0x6e, 0x9a, 0xa4, 0x52, 0xa9, 0x2a, 0x94, 0x4b, 0xa5, 0x00, 0x42, 0x22, 0xbd,
	0x22, 0x24, 0x40, 0x22, 0x72, 0xce, 0xdb, 0xc3, 0xea, 0xc5, 0x7b, 0xb1, 0x7d, 0x84, 0x23, 0xca,
	0x0b, 0x7f, 0xde, 0x40, 0x20, 0x21, 0x21, 0xf1, 0x05, 0xf8, 0x06, 0x7c, 0x01, 0x9e, 0xfa, 0x58,
	0x89, 0x17, 0x04, 0x12, 0x42, 0x09, 0xdf, 0x03, 0xb4, 0xbb, 0x63, 0xfb, 0x7c, 0xb7, 0xf6, 0x39,
	0xa8, 0x4f, 0x39, 0xef, 0xfc, 0x66, 0x7e, 0xbf, 0x99, 0x5d, 0xef, 0x8c, 0x03, 0xb3, 0x35, 0xe6,
	0x51, 0xb3, 0xee, 0xb1, 0x43, 0xf3, 0xd3, 0xd5, 0x3d, 0x1a, 0x58, 0xab, 0xe6, 0x41, 0x8b, 0x7a,
	0xed, 0x72, 0xd3, 0x63, 0x01, 0x23, 0x93, 0xdc, 0x5c, 0xe6, 0xe6, 0x32, 0x9a, 0xf5, 0xa9, 0x3a,
	0xab, 0x33, 0x61, 0x35, 0xf9, 0x2f, 0x09, 0xd4, 0x8b, 0x75, 0xc6, 0xea, 0x0d, 0x6a, 0x5a, 0x4d,
	0xc7, 0xb4, 0x5c, 0x97, 0x05, 0x56, 0xe0, 0x30, 0xd7, 0x47, 0xeb, 0x72, 0x8d, 0xf9, 0xfb, 0xcc,
	0x37, 0xf7, 0x2c, 0x9f, 0xca, 0xf8, 0x11, 0x5b, 0xd3, 0xaa, 0x3b, 0xae, 0x00, 0x23, 0xb6, 0xd4,
	0xab, 0xa8, 0x69, 0x79, 0xd6, 0x7e, 0x18, 0xab, 0xd8, 0x6b, 0x6f, 0x30, 0xcb, 0xcd, 0xb0, 0x52,
	0xd7, 0x46, 0xeb, 0x82, 0xc2, 0xea, 0x1c, 0xb4, 0x1c, 0xbb, 0x53, 0x40, 0x51, 0x25, 0xc0, 0xf1,
	0x62, 0x79, 0x98, 0x8a, 0xfb, 0x2c, 0xb2, 0xf3, 0x07, 0x69, 0x37, 0xa6, 0x80, 0x3c, 0xe6, 0x09,
	0xee, 0x08, 0xcd, 0x55, 0x7a, 0xd0, 0xa2, 0x7e, 0x60, 0xbc, 0x09, 0x97, 0x13, 0xab, 0x7e, 0x93,
	0xb9, 0x3e, 0x25, 0xab, 0x30, 0x2a, 0x73, 0x2b, 0x68, 0x73, 0xda, 0xd2, 0xf9, 0xbb, 0xd3, 0xe5,
	0x9e, 0x7a, 0x97, 0xd1, 0x05, 0x81, 0xc6, 0x6d, 0xd0, 0x45, 0xa4, 0x4d, 0xdf, 0xa7, 0x41, 0x45,
	0xfe, 0x79, 0xcb, 0x46, 0x1e, 0x72, 0x01, 0x06, 0x1d, 0x5b, 0x04, 0x1b, 0xaf, 0x0e, 0x3a, 0xb6,
	0xf1, 0x04, 0x66, 0x94, 0x68, 0xe4, 0x5f, 0x87, 0x11, 0x8b, 0x2f, 0x21, 0x7d, 0x41, 0x41, 0x2f,
	0x3d, 0x87, 0x9f, 0xff, 0x75, 0x6d, 0xa0, 0x2a, 0xc1, 0x86, 0x0e, 0x05, 0x11, 0x74, 0x9b, 0x06,
	0x9b, 0x8d, 0x86, 0x00, 0x44, 0x89, 0x3e, 0x81, 0x69, 0x85, 0x0d, 0xe9, 0xee, 0xc1, 0xa8, 0x88,
	0xc0, 0xd3, 0x1d, 0xca, 0xc1, 0x87, 0x68, 0x63, 0x19, 0x09, 0x77, 0x98, 0xef, 0xf0, 0x8d, 0xaa,
	0xb4, 0xd3, 0x33, 0x7e, 0x1f, 0xae, 0x24, 0xb0, 0x11, 0xf9, 0x43, 0x18, 0x6b, 0xe2, 0x1a, 0xa6,
	0x3b, 0xa3, 0xaa, 0x76, 0x48, 0x21, 0x15, 0x44, 0x2e, 0xc6, 0x7d, 0x98, 0xed, 0xd2, 0xb0, 0xe5,
	0x51, 0x2b, 0x60, 0x5e, 0x28, 0xa4, 0x00, 0xe7, 0x6a, 0x72, 0x05, 0xd5, 0x84, 0x8f, 0xc6, 0x34,
	0x5c, 0x95, 0x9b, 0xd0, 0x68, 0xc4, 0xaa, 0x64, 0xb9, 0x3e, 0xc2, 0xcc, 0x12, 0x26, 0x14, 0xfc,
	0x06, 0x8c, 0x87, 0xec, 0x61, 0xc1, 0x72, 0x28, 0x8e, 0x7d, 0x8c, 0x05, 0x98, 0x0f, 0x83, 0xbf,
	0x83, 0xa7, 0x9c, 0x79, 0xdd, 0x0a, 0xbe, 0xd2, 0xc0, 0xc8, 0x42, 0xa1, 0x98, 0x8f, 0x61, 0xaa,
	0x11, 0x59, 0xfd, 0xdd, 0x8e, 0x4a, 0x72, 0x5d, 0xd7, 0x15, 0xba, 0x7a, 0x83, 0xa1, 0xc2, 0xcb,
	0x1d, 0x81, 0x42, 0x93, 0xb1, 0x05, 0x8b, 0x42, 0x85, 0xc2, 0x2b, 0x7f, 0xa1, 0x7d, 0x58, 0xea,
	0x1f, 0x04, 0x13, 0xda, 0x4e, 0x1c, 0x87, 0x33, 0x27, 0x11, 0x1f, 0x8c, 0x75, 0xac, 0x9f, 0x8a,
	0x34, 0xfd, 0x98, 0x7e, 0xad, 0xc1, 0x42, 0xa6, 0x5b, 0xdf, 0xba, 0x6b, 0x2f, 0xa5, 0xee, 0x37,
	0x60, 0x4a, 0xca, 0x60, 0x56, 0xa6, 0xde, 0xb7, 0xf1, 0xb5, 0x8a, 0x71, 0xd1, 0x15, 0x36, 0xcc,
	0xaf, 0x5f, 0x14, 0x74, 0x55, 0x25, 0x88, 0xbb, 0x48, 0x09, 0x02, 0x1a, 0x73, 0x52, 0xd7, 0xce,
	0xc5, 0x19, 0xe1, 0x3a, 0x38, 0xa9, 0x6b, 0x67, 0x71, 0x72, 0x97, 0x90, 0x93, 0xba, 0xb6, 0xb1,
	0x82, 0x17, 0xe1, 0x07, 0x0e, 0x6d, 0xd8, 0x3b, 0xd4, 0xab, 0x51, 0x37, 0xb0, 0xea, 0x34, 0x8d,
	0xfa, 0x0f, 0x0d, 0x8a, 0x6a, 0x3c, 0x4a, 0xd0, 0x61, 0xac, 0x4a, 0xad, 0x46, 0xd5, 0x0a, 0xa8,
	0x70, 0x1b, 0xaa, 0x46, 0xcf, 0xa4, 0x04, 0x50, 0x61, 0x9e, 0xc7, 0x0e, 0x85, 0x75, 0x50, 0x58,
	0x3b, 0x56, 0x48, 0x11, 0xc6, 0x39, 0x56, 0x84, 0x2e, 0x0c, 0x09, 0x73, 0xbc, 0xc0, 0xad, 0xdb,
	0x1e, 0x3b, 0x94, 0xd6, 0x61, 0x69, 0x8d, 0x16, 0x88, 0x01, 0x13, 0x9b, 0xb5, 0xa0, 0x65, 0x35,
	0x36, 0x6b, 0xe2, 0x1c, 0x8c, 0x08, 0xc9, 0x89, 0x35, 0xce, 0xff, 0xc8, 0x79, 0xfa, 0x94, 0x7a,
	0xd4, 0xad, 0xd1, 0xc2, 0xa8, 0xe4, 0x8f, 0x57, 0x8c, 0x3b, 0x30, 0xb5, 0x63, 0x39, 0x5e, 0xa5,
	0xfd, 0x88, 0xba, 0x6c, 0x3f, 0xae, 0x7f, 0x01, 0xce, 0xd9, 0x72, 0x25, 0x7c, 0xb1, 0xf0, 0x91,
	0xef, 0x44, 0x97, 0x47, 0xbc, 0x13, 0xbc, 0x37, 0xe2, 0x4e, 0xcc, 0x2a, 0x76, 0xa2, 0xfe, 0x1e,
	0x7b, 0x46, 0x5d, 0xee, 0x5d, 0x15, 0x50, 0x63, 0x12, 0x2e, 0xf2, 0xdb, 0xce, 0x72, 0xbc, 0xa8,
	0x69, 0x6c, 0xc3, 0xa5, 0x78, 0x09, 0x23, 0xaf, 0xc1, 0x08, 0x87, 0x87, 0x37, 0x5f, 0x9f, 0xd0,
	0x12, 0x7b, 0xf7, 0xdf, 0x4b, 0x30, 0x22, 0xb6, 0x8d, 0x7c, 0x0e, 0xa3, 0xb2, 0x71, 0x12, 0xd5,
	0x3b, 0xd2, 0xdb, 0xa1, 0xf5, 0x1b, 0xfd, 0x60, 0x52, 0x97, 0x31, 0xff, 0xc5, 0x6f, 0xff, 0xfc,
	0x30, 0x38, 0x43, 0xa6, 0xcd, 0xb4, 0x39, 0x85, 0xfc, 0xa8, 0xc1, 0x85, 0x64, 0xc3, 0x25, 0x2b,
	0x69, 0xd1, 0x95, 0x6d, 0x5c, 0x2f, 0xe7, 0x85, 0xa3, 0xa8, 0xeb, 0x42, 0xd4, 0x35, 0x32, 0xab,
	0x10, 0x25, 0x7a, 0xa8, 0x79, 0xe4, 0xd8, 0xc7, 0xe4, 0x1b, 0x0d, 0x26, 0x3a, 0x1b, 0x33, 0xb9,
	0x95, 0xc6, 0xa3, 0x68, 0xed, 0xfa, 0xed, 0x7c, 0xe0, 0x1c, 0x75, 0x92, 0x6d, 0x9d, 0xcb, 0x39,
	0xdf, 0xd1, 0xf8, 0xc8, 0x72, 0x6a, 0xd6, 0x3d, 0x8d, 0x53, 0xbf, 0x95, 0x0b, 0x8b, 0x5a, 0x5e,
	0x13, 0x5a, 0x4a, 0xa4, 0xa8, 0xda, 0xb3, 0xb0, 0x5d, 0x92, 0xef, 0x34, 0x98, 0xe8, 0xbc, 0x83,
	0xd3, 0xab, 0xa3, 0xb8, 0xe0, 0xf5, 0xa5, 0x7e, 0xe0, 0x48, 0xcd, 0x92, 0x50, 0x63, 0x90, 0xb9,
	0x0c, 0x35, 0x72, 0xbf, 0x7e, 0xd6, 0x60, 0xb2, 0xa7, 0x83, 0x91, 0x3b, 0xfd, 0x65, 0x25, 0x3b,
	0xe6, 0x19, 0xb4, 0x6d, 0x08, 0x6d, 0x26, 0x59, 0xc9, 0xd0, 0xb6, 0x8b, 0xed, 0xd6, 0x3c, 0xc2,
	0x1f, 0xc7, 0xe4, 0x17, 0x0d, 0xae, 0x28, 0xe7, 0x07, 0xb2, 0x9e, 0xb1, 0x4f, 0xa9, 0x43, 0x89,
	0xbe, 0x71, 0x46, 0x2f, 0x54, 0x6f, 0x0a, 0xf5, 0x37, 0xc9, 0xa2, 0x99, 0x3e, 0xe7, 0x33, 0x6f,
	0x37, 0xde, 0xf2, 0x3f, 0x35, 0x98, 0xc9, 0x18, 0x16, 0xc8, 0xeb, 0x69, 0x3a, 0xfa, 0x8f, 0x29,
	0xfa, 0x83, 0xff, 0xe5, 0x8b, 0x99, 0x6c, 0x89, 0x4c, 0x1e, 0x92, 0x07, 0xf9, 0x32, 0xd9, 0xdd,
	0x6b, 0x2b, 0x76, 0xe5, 0x57, 0x0d, 0x5e, 0x55, 0x8f, 0x17, 0x64, 0xe3, 0x2c, 0xe2, 0xe2, 0x43,
	0x7e, 0xef, 0xac, 0x6e, 0x98, 0xce, 0x7d, 0x91, 0xce, 0x1a, 0x59, 0xcd, 0x9f, 0x8e, 0x63, 0xcb,
	0x77, 0xe0, 0x4b, 0x0d, 0xc6, 0xc2, 0x01, 0x80, 0x2c, 0xa6, 0xf2, 0x27, 0x47, 0x89, 0xf4, 0x13,
	0xdf, 0x3d, 0x4b, 0x64, 0xde, 0x0d, 0x7c, 0x72, 0xe8, 0x50, 0x81, 0xa3, 0x4f, 0x86, 0x8a, 0xe4,
	0x10, 0x95, 0xa1, 0xa2, 0x6b, 0x8a, 0xca, 0x56, 0xc1, 0x2c, 0xbc, 0x0f, 0x7e, 0xd2, 0xe0, 0x62,
	0xd7, 0x40, 0x42, 0x52, 0x5b, 0x85, 0x7a, 0xd2, 0xd1, 0xcd, 0xdc, 0xf8, 0x1c, 0xbd, 0xa5, 0xcd,
	0x7d, 0xa4, 0xb6, 0x6f, 0x35, 0x78, 0x25, 0x31, 0x23, 0x28, 0xcb, 0xa4, 0x9a, 0x3b, 0x94, 0x65,
	0x52, 0x8e, 0x1b, 0xc6, 0x4d, 0xa1, 0x65, 0x81, 0xcc, 0x9b, 0xea, 0x6f, 0x74, 0xf3, 0x08, 0x27,
	0x96, 0x63, 0xd2, 0x82, 0xb1, 0x70, 0xa6, 0x20, 0x86, 0xea, 0x3b, 0x33, 0x39, 0x83, 0xe8, 0x0b,
	0x99, 0x18, 0xe4, 0x9f, 0x13, 0xfc, 0x3a, 0x29, 0xa4, 0xf0, 0xfb, 0x95, 0xca, 0xf3, 0x93, 0x92,
	0xf6, 0xe2, 0xa4, 0xa4, 0xfd, 0x7d, 0x52, 0xd2, 0xbe, 0x3f, 0x2d, 0x0d, 0xbc, 0x38, 0x2d, 0x0d,
	0xfc, 0x7e, 0x5a, 0x1a, 0xf8, 0x70, 0xa9, 0xee, 0x04, 0x9f, 0xb4, 0xf6, 0xca, 0x35, 0xb6, 0x6f,
	0x3e, 0x6e, 0x59, 0xb6, 0x67, 0x05, 0xf4, 0x5d, 0xaf, 0x2e, 0x23, 0x7d, 0x26, 0x63, 0x05, 0xed,
	0x26, 0xf5, 0xf7, 0x46, 0xc5, 0x7f, 0x12, 0xd6, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x84, 0x15,
	0x1f, 0x61, 0x9c, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	AssetByAssetId(ctx context.Context, in *QueryAssetByAssetIdRequest, opts ...grpc.CallOption) (*QueryAssetByAssetIdResponse, error)
	GetAllAssets(ctx context.Context, in *QueryGetAllAssetsRequest, opts ...grpc.CallOption) (*QueryGetAllAssetsResponse, error)
	AllPosition(ctx context.Context, in *QueryAllPositionRequest, opts ...grpc.CallOption) (*QueryAllPositionResponse, error)
	PositionById(ctx context.Context, in *QueryPositionByIdRequest, opts ...grpc.CallOption) (*QueryPositionResponse, error)
	PositionByCreator(ctx context.Context, in *QueryPositionByCreatorRequest, opts ...grpc.CallOption) (*QueryPositionResponse, error)
	AllLiquidatorPosition(ctx context.Context, in *QueryAllLiquidatorPositionRequest, opts ...grpc.CallOption) (*QueryAllLiquidatorPositionResponse, error)
	LiquidatorPositionByCreator(ctx context.Context, in *QueryLiquidatorPositionByCreatorRequest, opts ...grpc.CallOption) (*QueryLiquidatorPositionByCreatorResponse, error)
	LiquidatorPositionById(ctx context.Context, in *QueryLiquidatorPositionByIdRequest, opts ...grpc.CallOption) (*QueryLiquidatorPositionByIdResponse, error)
	LendById(ctx context.Context, in *QueryLendByIdRequest, opts ...grpc.CallOption) (*QueryLendByIdResponse, error)
	LoanById(ctx context.Context, in *QueryLoanByIdRequest, opts ...grpc.CallOption) (*QueryLoanByIdResponse, error)
	YieldPercentage(ctx context.Context, in *QueryYieldPercentageRequest, opts ...grpc.CallOption) (*QueryYieldPercentageResponse, error)
	PairByDenomId(ctx context.Context, in *PairByDenomIdRequest, opts ...grpc.CallOption) (*PairByDenomIdResponse, error)
	AllPairs(ctx context.Context, in *AllPairsRequest, opts ...grpc.CallOption) (*AllPairsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AssetByAssetId(ctx context.Context, in *QueryAssetByAssetIdRequest, opts ...grpc.CallOption) (*QueryAssetByAssetIdResponse, error) {
	out := new(QueryAssetByAssetIdResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/AssetByAssetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllAssets(ctx context.Context, in *QueryGetAllAssetsRequest, opts ...grpc.CallOption) (*QueryGetAllAssetsResponse, error) {
	out := new(QueryGetAllAssetsResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/GetAllAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllPosition(ctx context.Context, in *QueryAllPositionRequest, opts ...grpc.CallOption) (*QueryAllPositionResponse, error) {
	out := new(QueryAllPositionResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/AllPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PositionById(ctx context.Context, in *QueryPositionByIdRequest, opts ...grpc.CallOption) (*QueryPositionResponse, error) {
	out := new(QueryPositionResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/PositionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PositionByCreator(ctx context.Context, in *QueryPositionByCreatorRequest, opts ...grpc.CallOption) (*QueryPositionResponse, error) {
	out := new(QueryPositionResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/PositionByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllLiquidatorPosition(ctx context.Context, in *QueryAllLiquidatorPositionRequest, opts ...grpc.CallOption) (*QueryAllLiquidatorPositionResponse, error) {
	out := new(QueryAllLiquidatorPositionResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/AllLiquidatorPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidatorPositionByCreator(ctx context.Context, in *QueryLiquidatorPositionByCreatorRequest, opts ...grpc.CallOption) (*QueryLiquidatorPositionByCreatorResponse, error) {
	out := new(QueryLiquidatorPositionByCreatorResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/LiquidatorPositionByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidatorPositionById(ctx context.Context, in *QueryLiquidatorPositionByIdRequest, opts ...grpc.CallOption) (*QueryLiquidatorPositionByIdResponse, error) {
	out := new(QueryLiquidatorPositionByIdResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/LiquidatorPositionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LendById(ctx context.Context, in *QueryLendByIdRequest, opts ...grpc.CallOption) (*QueryLendByIdResponse, error) {
	out := new(QueryLendByIdResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/LendById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LoanById(ctx context.Context, in *QueryLoanByIdRequest, opts ...grpc.CallOption) (*QueryLoanByIdResponse, error) {
	out := new(QueryLoanByIdResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/LoanById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) YieldPercentage(ctx context.Context, in *QueryYieldPercentageRequest, opts ...grpc.CallOption) (*QueryYieldPercentageResponse, error) {
	out := new(QueryYieldPercentageResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/YieldPercentage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PairByDenomId(ctx context.Context, in *PairByDenomIdRequest, opts ...grpc.CallOption) (*PairByDenomIdResponse, error) {
	out := new(PairByDenomIdResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/PairByDenomId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllPairs(ctx context.Context, in *AllPairsRequest, opts ...grpc.CallOption) (*AllPairsResponse, error) {
	out := new(AllPairsResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/AllPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	AssetByAssetId(context.Context, *QueryAssetByAssetIdRequest) (*QueryAssetByAssetIdResponse, error)
	GetAllAssets(context.Context, *QueryGetAllAssetsRequest) (*QueryGetAllAssetsResponse, error)
	AllPosition(context.Context, *QueryAllPositionRequest) (*QueryAllPositionResponse, error)
	PositionById(context.Context, *QueryPositionByIdRequest) (*QueryPositionResponse, error)
	PositionByCreator(context.Context, *QueryPositionByCreatorRequest) (*QueryPositionResponse, error)
	AllLiquidatorPosition(context.Context, *QueryAllLiquidatorPositionRequest) (*QueryAllLiquidatorPositionResponse, error)
	LiquidatorPositionByCreator(context.Context, *QueryLiquidatorPositionByCreatorRequest) (*QueryLiquidatorPositionByCreatorResponse, error)
	LiquidatorPositionById(context.Context, *QueryLiquidatorPositionByIdRequest) (*QueryLiquidatorPositionByIdResponse, error)
	LendById(context.Context, *QueryLendByIdRequest) (*QueryLendByIdResponse, error)
	LoanById(context.Context, *QueryLoanByIdRequest) (*QueryLoanByIdResponse, error)
	YieldPercentage(context.Context, *QueryYieldPercentageRequest) (*QueryYieldPercentageResponse, error)
	PairByDenomId(context.Context, *PairByDenomIdRequest) (*PairByDenomIdResponse, error)
	AllPairs(context.Context, *AllPairsRequest) (*AllPairsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) AssetByAssetId(ctx context.Context, req *QueryAssetByAssetIdRequest) (*QueryAssetByAssetIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetByAssetId not implemented")
}
func (*UnimplementedQueryServer) GetAllAssets(ctx context.Context, req *QueryGetAllAssetsRequest) (*QueryGetAllAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAssets not implemented")
}
func (*UnimplementedQueryServer) AllPosition(ctx context.Context, req *QueryAllPositionRequest) (*QueryAllPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllPosition not implemented")
}
func (*UnimplementedQueryServer) PositionById(ctx context.Context, req *QueryPositionByIdRequest) (*QueryPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionById not implemented")
}
func (*UnimplementedQueryServer) PositionByCreator(ctx context.Context, req *QueryPositionByCreatorRequest) (*QueryPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionByCreator not implemented")
}
func (*UnimplementedQueryServer) AllLiquidatorPosition(ctx context.Context, req *QueryAllLiquidatorPositionRequest) (*QueryAllLiquidatorPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllLiquidatorPosition not implemented")
}
func (*UnimplementedQueryServer) LiquidatorPositionByCreator(ctx context.Context, req *QueryLiquidatorPositionByCreatorRequest) (*QueryLiquidatorPositionByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidatorPositionByCreator not implemented")
}
func (*UnimplementedQueryServer) LiquidatorPositionById(ctx context.Context, req *QueryLiquidatorPositionByIdRequest) (*QueryLiquidatorPositionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidatorPositionById not implemented")
}
func (*UnimplementedQueryServer) LendById(ctx context.Context, req *QueryLendByIdRequest) (*QueryLendByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LendById not implemented")
}
func (*UnimplementedQueryServer) LoanById(ctx context.Context, req *QueryLoanByIdRequest) (*QueryLoanByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanById not implemented")
}
func (*UnimplementedQueryServer) YieldPercentage(ctx context.Context, req *QueryYieldPercentageRequest) (*QueryYieldPercentageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method YieldPercentage not implemented")
}
func (*UnimplementedQueryServer) PairByDenomId(ctx context.Context, req *PairByDenomIdRequest) (*PairByDenomIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PairByDenomId not implemented")
}
func (*UnimplementedQueryServer) AllPairs(ctx context.Context, req *AllPairsRequest) (*AllPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllPairs not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AssetByAssetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssetByAssetIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AssetByAssetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/AssetByAssetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AssetByAssetId(ctx, req.(*QueryAssetByAssetIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/GetAllAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllAssets(ctx, req.(*QueryGetAllAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/AllPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllPosition(ctx, req.(*QueryAllPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PositionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPositionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PositionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/PositionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PositionById(ctx, req.(*QueryPositionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PositionByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPositionByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PositionByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/PositionByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PositionByCreator(ctx, req.(*QueryPositionByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllLiquidatorPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLiquidatorPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllLiquidatorPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/AllLiquidatorPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllLiquidatorPosition(ctx, req.(*QueryAllLiquidatorPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidatorPositionByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidatorPositionByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidatorPositionByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/LiquidatorPositionByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidatorPositionByCreator(ctx, req.(*QueryLiquidatorPositionByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidatorPositionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidatorPositionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidatorPositionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/LiquidatorPositionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidatorPositionById(ctx, req.(*QueryLiquidatorPositionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LendById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLendByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LendById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/LendById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LendById(ctx, req.(*QueryLendByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LoanById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoanByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LoanById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/LoanById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LoanById(ctx, req.(*QueryLoanByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_YieldPercentage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryYieldPercentageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).YieldPercentage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/YieldPercentage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).YieldPercentage(ctx, req.(*QueryYieldPercentageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PairByDenomId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PairByDenomIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PairByDenomId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/PairByDenomId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PairByDenomId(ctx, req.(*PairByDenomIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/AllPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllPairs(ctx, req.(*AllPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.grow.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "AssetByAssetId",
			Handler:    _Query_AssetByAssetId_Handler,
		},
		{
			MethodName: "GetAllAssets",
			Handler:    _Query_GetAllAssets_Handler,
		},
		{
			MethodName: "AllPosition",
			Handler:    _Query_AllPosition_Handler,
		},
		{
			MethodName: "PositionById",
			Handler:    _Query_PositionById_Handler,
		},
		{
			MethodName: "PositionByCreator",
			Handler:    _Query_PositionByCreator_Handler,
		},
		{
			MethodName: "AllLiquidatorPosition",
			Handler:    _Query_AllLiquidatorPosition_Handler,
		},
		{
			MethodName: "LiquidatorPositionByCreator",
			Handler:    _Query_LiquidatorPositionByCreator_Handler,
		},
		{
			MethodName: "LiquidatorPositionById",
			Handler:    _Query_LiquidatorPositionById_Handler,
		},
		{
			MethodName: "LendById",
			Handler:    _Query_LendById_Handler,
		},
		{
			MethodName: "LoanById",
			Handler:    _Query_LoanById_Handler,
		},
		{
			MethodName: "YieldPercentage",
			Handler:    _Query_YieldPercentage_Handler,
		},
		{
			MethodName: "PairByDenomId",
			Handler:    _Query_PairByDenomId_Handler,
		},
		{
			MethodName: "AllPairs",
			Handler:    _Query_AllPairs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/grow/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetByAssetIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetByAssetIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetByAssetIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetByAssetIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetByAssetIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetByAssetIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllAssetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllAssetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllAssetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetAllAssetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllAssetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllAssetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPositionByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPositionByCreatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionByCreatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionByCreatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLiquidatorPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLiquidatorPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLiquidatorPositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllLiquidatorPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLiquidatorPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLiquidatorPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LiquidatorsPosition) > 0 {
		for iNdEx := len(m.LiquidatorsPosition) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidatorsPosition[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidatorPositionByCreatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidatorPositionByCreatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidatorPositionByCreatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidatorPositionByCreatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidatorPositionByCreatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidatorPositionByCreatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Position) > 0 {
		for iNdEx := len(m.Position) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Position[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidatorPositionByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidatorPositionByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidatorPositionByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidatorPositionByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidatorPositionByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidatorPositionByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LiquidatorsPosition.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLoanByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoanByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoanByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoanByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoanByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoanByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Loan.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLendByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLendByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLendByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLendByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLendByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLendByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Lend.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryYieldPercentageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryYieldPercentageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryYieldPercentageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryYieldPercentageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryYieldPercentageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryYieldPercentageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Difference != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Difference))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ActualAction) > 0 {
		i -= len(m.ActualAction)
		copy(dAtA[i:], m.ActualAction)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ActualAction)))
		i--
		dAtA[i] = 0x2a
	}
	if m.GrowYield != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GrowYield))
		i--
		dAtA[i] = 0x20
	}
	if m.RealYield != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RealYield))
		i--
		dAtA[i] = 0x18
	}
	if m.BorrowRate != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BorrowRate))
		i--
		dAtA[i] = 0x10
	}
	if m.RealRate != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RealRate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PairByDenomIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PairByDenomIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PairByDenomIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomId) > 0 {
		i -= len(m.DenomId)
		copy(dAtA[i:], m.DenomId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DenomId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PairByDenomIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PairByDenomIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PairByDenomIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pair != nil {
		{
			size, err := m.Pair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllPairsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllPairsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllPairsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AllPairsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllPairsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllPairsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for iNdEx := len(m.Pairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetByAssetIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetByAssetIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Asset.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllAssetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetAllAssetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPositionByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Position.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPositionByCreatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllLiquidatorPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllLiquidatorPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiquidatorsPosition) > 0 {
		for _, e := range m.LiquidatorsPosition {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLiquidatorPositionByCreatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidatorPositionByCreatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Position) > 0 {
		for _, e := range m.Position {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLiquidatorPositionByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidatorPositionByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LiquidatorsPosition.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLoanByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLoanByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Loan.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLendByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLendByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Lend.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryYieldPercentageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryYieldPercentageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RealRate != 0 {
		n += 1 + sovQuery(uint64(m.RealRate))
	}
	if m.BorrowRate != 0 {
		n += 1 + sovQuery(uint64(m.BorrowRate))
	}
	if m.RealYield != 0 {
		n += 1 + sovQuery(uint64(m.RealYield))
	}
	if m.GrowYield != 0 {
		n += 1 + sovQuery(uint64(m.GrowYield))
	}
	l = len(m.ActualAction)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Difference != 0 {
		n += 1 + sovQuery(uint64(m.Difference))
	}
	return n
}

func (m *PairByDenomIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DenomId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *PairByDenomIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pair != nil {
		l = m.Pair.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AllPairsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AllPairsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for _, e := range m.Pairs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetByAssetIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetByAssetIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetByAssetIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetByAssetIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetByAssetIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetByAssetIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllAssetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllAssetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllAssetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllAssetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllAssetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllAssetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, Asset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionByCreatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionByCreatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionByCreatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, Position{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLiquidatorPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLiquidatorPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLiquidatorPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLiquidatorPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLiquidatorPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLiquidatorPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidatorsPosition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidatorsPosition = append(m.LiquidatorsPosition, LiquidatorPosition{})
			if err := m.LiquidatorsPosition[len(m.LiquidatorsPosition)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidatorPositionByCreatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidatorPositionByCreatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidatorPositionByCreatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidatorPositionByCreatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidatorPositionByCreatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidatorPositionByCreatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = append(m.Position, LiquidatorPosition{})
			if err := m.Position[len(m.Position)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidatorPositionByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidatorPositionByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidatorPositionByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidatorPositionByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidatorPositionByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidatorPositionByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidatorsPosition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidatorsPosition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoanByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoanByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoanByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoanByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoanByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoanByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Loan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLendByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLendByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLendByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLendByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLendByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLendByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Lend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryYieldPercentageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryYieldPercentageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryYieldPercentageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryYieldPercentageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryYieldPercentageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryYieldPercentageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealRate", wireType)
			}
			m.RealRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowRate", wireType)
			}
			m.BorrowRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorrowRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealYield", wireType)
			}
			m.RealYield = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealYield |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrowYield", wireType)
			}
			m.GrowYield = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrowYield |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActualAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Difference", wireType)
			}
			m.Difference = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Difference |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PairByDenomIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PairByDenomIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PairByDenomIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PairByDenomIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PairByDenomIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PairByDenomIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pair == nil {
				m.Pair = &GTokenPair{}
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllPairsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllPairsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllPairsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllPairsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllPairsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllPairsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pairs = append(m.Pairs, &GTokenPair{})
			if err := m.Pairs[len(m.Pairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
