// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core/grow/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	types "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	grpc1 "github.com/gogo/protobuf/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

// LendAssetByLendAssetId
type QueryLendAssetByLendAssetIdRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryLendAssetByLendAssetIdRequest) Reset()         { *m = QueryLendAssetByLendAssetIdRequest{} }
func (m *QueryLendAssetByLendAssetIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLendAssetByLendAssetIdRequest) ProtoMessage()    {}
func (*QueryLendAssetByLendAssetIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{2}
}
func (m *QueryLendAssetByLendAssetIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLendAssetByLendAssetIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLendAssetByLendAssetIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLendAssetByLendAssetIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLendAssetByLendAssetIdRequest.Merge(m, src)
}
func (m *QueryLendAssetByLendAssetIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLendAssetByLendAssetIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLendAssetByLendAssetIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLendAssetByLendAssetIdRequest proto.InternalMessageInfo

func (m *QueryLendAssetByLendAssetIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryLendAssetByLendAssetIdResponse struct {
	LendAssetId   string         `protobuf:"bytes,1,opt,name=LendAssetId,proto3" json:"LendAssetId,omitempty"`
	AssetMetadata types.Metadata `protobuf:"bytes,2,opt,name=assetMetadata,proto3" json:"assetMetadata" yaml:"assetMetadata"`
	OracleAssetId string         `protobuf:"bytes,3,opt,name=oracleAssetId,proto3" json:"oracleAssetId,omitempty"`
}

func (m *QueryLendAssetByLendAssetIdResponse) Reset()         { *m = QueryLendAssetByLendAssetIdResponse{} }
func (m *QueryLendAssetByLendAssetIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLendAssetByLendAssetIdResponse) ProtoMessage()    {}
func (*QueryLendAssetByLendAssetIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{3}
}
func (m *QueryLendAssetByLendAssetIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLendAssetByLendAssetIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLendAssetByLendAssetIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLendAssetByLendAssetIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLendAssetByLendAssetIdResponse.Merge(m, src)
}
func (m *QueryLendAssetByLendAssetIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLendAssetByLendAssetIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLendAssetByLendAssetIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLendAssetByLendAssetIdResponse proto.InternalMessageInfo

func (m *QueryLendAssetByLendAssetIdResponse) GetLendAssetId() string {
	if m != nil {
		return m.LendAssetId
	}
	return ""
}

func (m *QueryLendAssetByLendAssetIdResponse) GetAssetMetadata() types.Metadata {
	if m != nil {
		return m.AssetMetadata
	}
	return types.Metadata{}
}

func (m *QueryLendAssetByLendAssetIdResponse) GetOracleAssetId() string {
	if m != nil {
		return m.OracleAssetId
	}
	return ""
}

// PositionById
type QueryPositionByIdRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryPositionByIdRequest) Reset()         { *m = QueryPositionByIdRequest{} }
func (m *QueryPositionByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPositionByIdRequest) ProtoMessage()    {}
func (*QueryPositionByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{4}
}
func (m *QueryPositionByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionByIdRequest.Merge(m, src)
}
func (m *QueryPositionByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionByIdRequest proto.InternalMessageInfo

func (m *QueryPositionByIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryPositionResponse struct {
	Creator             string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DepositId           string   `protobuf:"bytes,2,opt,name=depositId,proto3" json:"depositId,omitempty"`
	Collateral          string   `protobuf:"bytes,3,opt,name=collateral,proto3" json:"collateral,omitempty"`
	OracleTicker        string   `protobuf:"bytes,4,opt,name=oracleTicker,proto3" json:"oracleTicker,omitempty"`
	BorrowedAmountInUSD uint64   `protobuf:"varint,5,opt,name=borrowedAmountInUSD,proto3" json:"borrowedAmountInUSD,omitempty"`
	LoanIds             []string `protobuf:"bytes,6,rep,name=loanIds,proto3" json:"loanIds,omitempty"`
}

func (m *QueryPositionResponse) Reset()         { *m = QueryPositionResponse{} }
func (m *QueryPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPositionResponse) ProtoMessage()    {}
func (*QueryPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{5}
}
func (m *QueryPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionResponse.Merge(m, src)
}
func (m *QueryPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionResponse proto.InternalMessageInfo

func (m *QueryPositionResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryPositionResponse) GetDepositId() string {
	if m != nil {
		return m.DepositId
	}
	return ""
}

func (m *QueryPositionResponse) GetCollateral() string {
	if m != nil {
		return m.Collateral
	}
	return ""
}

func (m *QueryPositionResponse) GetOracleTicker() string {
	if m != nil {
		return m.OracleTicker
	}
	return ""
}

func (m *QueryPositionResponse) GetBorrowedAmountInUSD() uint64 {
	if m != nil {
		return m.BorrowedAmountInUSD
	}
	return 0
}

func (m *QueryPositionResponse) GetLoanIds() []string {
	if m != nil {
		return m.LoanIds
	}
	return nil
}

// PositionByCreator
type QueryPositionByCreatorRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *QueryPositionByCreatorRequest) Reset()         { *m = QueryPositionByCreatorRequest{} }
func (m *QueryPositionByCreatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPositionByCreatorRequest) ProtoMessage()    {}
func (*QueryPositionByCreatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{6}
}
func (m *QueryPositionByCreatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionByCreatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionByCreatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionByCreatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionByCreatorRequest.Merge(m, src)
}
func (m *QueryPositionByCreatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionByCreatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionByCreatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionByCreatorRequest proto.InternalMessageInfo

func (m *QueryPositionByCreatorRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// AllPosition
type QueryAllPositionRequest struct {
}

func (m *QueryAllPositionRequest) Reset()         { *m = QueryAllPositionRequest{} }
func (m *QueryAllPositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPositionRequest) ProtoMessage()    {}
func (*QueryAllPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{7}
}
func (m *QueryAllPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPositionRequest.Merge(m, src)
}
func (m *QueryAllPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPositionRequest proto.InternalMessageInfo

type QueryAllPositionResponse struct {
	Positions []Position `protobuf:"bytes,1,rep,name=Positions,proto3" json:"Positions"`
}

func (m *QueryAllPositionResponse) Reset()         { *m = QueryAllPositionResponse{} }
func (m *QueryAllPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPositionResponse) ProtoMessage()    {}
func (*QueryAllPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{8}
}
func (m *QueryAllPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPositionResponse.Merge(m, src)
}
func (m *QueryAllPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPositionResponse proto.InternalMessageInfo

func (m *QueryAllPositionResponse) GetPositions() []Position {
	if m != nil {
		return m.Positions
	}
	return nil
}

// AllLiquidatorPosition
type QueryAllLiquidatorPositionRequest struct {
}

func (m *QueryAllLiquidatorPositionRequest) Reset()         { *m = QueryAllLiquidatorPositionRequest{} }
func (m *QueryAllLiquidatorPositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLiquidatorPositionRequest) ProtoMessage()    {}
func (*QueryAllLiquidatorPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{9}
}
func (m *QueryAllLiquidatorPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLiquidatorPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLiquidatorPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLiquidatorPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLiquidatorPositionRequest.Merge(m, src)
}
func (m *QueryAllLiquidatorPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLiquidatorPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLiquidatorPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLiquidatorPositionRequest proto.InternalMessageInfo

type QueryAllLiquidatorPositionResponse struct {
	LiquidatorsPosition []LiquidatorPosition `protobuf:"bytes,1,rep,name=LiquidatorsPosition,proto3" json:"LiquidatorsPosition"`
}

func (m *QueryAllLiquidatorPositionResponse) Reset()         { *m = QueryAllLiquidatorPositionResponse{} }
func (m *QueryAllLiquidatorPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLiquidatorPositionResponse) ProtoMessage()    {}
func (*QueryAllLiquidatorPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{10}
}
func (m *QueryAllLiquidatorPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLiquidatorPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLiquidatorPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLiquidatorPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLiquidatorPositionResponse.Merge(m, src)
}
func (m *QueryAllLiquidatorPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLiquidatorPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLiquidatorPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLiquidatorPositionResponse proto.InternalMessageInfo

func (m *QueryAllLiquidatorPositionResponse) GetLiquidatorsPosition() []LiquidatorPosition {
	if m != nil {
		return m.LiquidatorsPosition
	}
	return nil
}

// LiquidatorPositionByCreator
type QueryLiquidatorPositionByCreatorRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *QueryLiquidatorPositionByCreatorRequest) Reset() {
	*m = QueryLiquidatorPositionByCreatorRequest{}
}
func (m *QueryLiquidatorPositionByCreatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidatorPositionByCreatorRequest) ProtoMessage()    {}
func (*QueryLiquidatorPositionByCreatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{11}
}
func (m *QueryLiquidatorPositionByCreatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidatorPositionByCreatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidatorPositionByCreatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidatorPositionByCreatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidatorPositionByCreatorRequest.Merge(m, src)
}
func (m *QueryLiquidatorPositionByCreatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidatorPositionByCreatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidatorPositionByCreatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidatorPositionByCreatorRequest proto.InternalMessageInfo

func (m *QueryLiquidatorPositionByCreatorRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type QueryLiquidatorPositionByCreatorResponse struct {
	LiquidatorPositionId string `protobuf:"bytes,1,opt,name=liquidatorPositionId,proto3" json:"liquidatorPositionId,omitempty"`
	BorrowAssetId        string `protobuf:"bytes,2,opt,name=borrowAssetId,proto3" json:"borrowAssetId,omitempty"`
	Liquidator           string `protobuf:"bytes,3,opt,name=liquidator,proto3" json:"liquidator,omitempty"`
	Amount               string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Premium              uint64 `protobuf:"varint,5,opt,name=premium,proto3" json:"premium,omitempty"`
}

func (m *QueryLiquidatorPositionByCreatorResponse) Reset() {
	*m = QueryLiquidatorPositionByCreatorResponse{}
}
func (m *QueryLiquidatorPositionByCreatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidatorPositionByCreatorResponse) ProtoMessage()    {}
func (*QueryLiquidatorPositionByCreatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{12}
}
func (m *QueryLiquidatorPositionByCreatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidatorPositionByCreatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidatorPositionByCreatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidatorPositionByCreatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidatorPositionByCreatorResponse.Merge(m, src)
}
func (m *QueryLiquidatorPositionByCreatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidatorPositionByCreatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidatorPositionByCreatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidatorPositionByCreatorResponse proto.InternalMessageInfo

func (m *QueryLiquidatorPositionByCreatorResponse) GetLiquidatorPositionId() string {
	if m != nil {
		return m.LiquidatorPositionId
	}
	return ""
}

func (m *QueryLiquidatorPositionByCreatorResponse) GetBorrowAssetId() string {
	if m != nil {
		return m.BorrowAssetId
	}
	return ""
}

func (m *QueryLiquidatorPositionByCreatorResponse) GetLiquidator() string {
	if m != nil {
		return m.Liquidator
	}
	return ""
}

func (m *QueryLiquidatorPositionByCreatorResponse) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *QueryLiquidatorPositionByCreatorResponse) GetPremium() uint64 {
	if m != nil {
		return m.Premium
	}
	return 0
}

// LiquidatorPositionById
type QueryLiquidatorPositionByIdRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryLiquidatorPositionByIdRequest) Reset()         { *m = QueryLiquidatorPositionByIdRequest{} }
func (m *QueryLiquidatorPositionByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidatorPositionByIdRequest) ProtoMessage()    {}
func (*QueryLiquidatorPositionByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{13}
}
func (m *QueryLiquidatorPositionByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidatorPositionByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidatorPositionByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidatorPositionByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidatorPositionByIdRequest.Merge(m, src)
}
func (m *QueryLiquidatorPositionByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidatorPositionByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidatorPositionByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidatorPositionByIdRequest proto.InternalMessageInfo

func (m *QueryLiquidatorPositionByIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// AllFundAddress
type QueryAllFundAddressRequest struct {
}

func (m *QueryAllFundAddressRequest) Reset()         { *m = QueryAllFundAddressRequest{} }
func (m *QueryAllFundAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFundAddressRequest) ProtoMessage()    {}
func (*QueryAllFundAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{14}
}
func (m *QueryAllFundAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFundAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFundAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFundAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFundAddressRequest.Merge(m, src)
}
func (m *QueryAllFundAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFundAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFundAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFundAddressRequest proto.InternalMessageInfo

type QueryAllFundAddressResponse struct {
	USQReserveAddress         string `protobuf:"bytes,1,opt,name=USQReserveAddress,proto3" json:"USQReserveAddress,omitempty"`
	GrowYieldReserveAddress   string `protobuf:"bytes,2,opt,name=GrowYieldReserveAddress,proto3" json:"GrowYieldReserveAddress,omitempty"`
	GrowStakingReserveAddress string `protobuf:"bytes,3,opt,name=GrowStakingReserveAddress,proto3" json:"GrowStakingReserveAddress,omitempty"`
}

func (m *QueryAllFundAddressResponse) Reset()         { *m = QueryAllFundAddressResponse{} }
func (m *QueryAllFundAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFundAddressResponse) ProtoMessage()    {}
func (*QueryAllFundAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{15}
}
func (m *QueryAllFundAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFundAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFundAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFundAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFundAddressResponse.Merge(m, src)
}
func (m *QueryAllFundAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFundAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFundAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFundAddressResponse proto.InternalMessageInfo

func (m *QueryAllFundAddressResponse) GetUSQReserveAddress() string {
	if m != nil {
		return m.USQReserveAddress
	}
	return ""
}

func (m *QueryAllFundAddressResponse) GetGrowYieldReserveAddress() string {
	if m != nil {
		return m.GrowYieldReserveAddress
	}
	return ""
}

func (m *QueryAllFundAddressResponse) GetGrowStakingReserveAddress() string {
	if m != nil {
		return m.GrowStakingReserveAddress
	}
	return ""
}

// LoanById
type QueryLoanByIdRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryLoanByIdRequest) Reset()         { *m = QueryLoanByIdRequest{} }
func (m *QueryLoanByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLoanByIdRequest) ProtoMessage()    {}
func (*QueryLoanByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{16}
}
func (m *QueryLoanByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoanByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoanByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoanByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoanByIdRequest.Merge(m, src)
}
func (m *QueryLoanByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoanByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoanByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoanByIdRequest proto.InternalMessageInfo

func (m *QueryLoanByIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryLoanByIdResponse struct {
	LoanId       string `protobuf:"bytes,1,opt,name=loanId,proto3" json:"loanId,omitempty"`
	Borrower     string `protobuf:"bytes,2,opt,name=borrower,proto3" json:"borrower,omitempty"`
	AmountOut    string `protobuf:"bytes,3,opt,name=amountOut,proto3" json:"amountOut,omitempty"`
	StartTime    uint64 `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	OracleTicker string `protobuf:"bytes,5,opt,name=oracleTicker,proto3" json:"oracleTicker,omitempty"`
}

func (m *QueryLoanByIdResponse) Reset()         { *m = QueryLoanByIdResponse{} }
func (m *QueryLoanByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLoanByIdResponse) ProtoMessage()    {}
func (*QueryLoanByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{17}
}
func (m *QueryLoanByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoanByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoanByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoanByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoanByIdResponse.Merge(m, src)
}
func (m *QueryLoanByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoanByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoanByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoanByIdResponse proto.InternalMessageInfo

func (m *QueryLoanByIdResponse) GetLoanId() string {
	if m != nil {
		return m.LoanId
	}
	return ""
}

func (m *QueryLoanByIdResponse) GetBorrower() string {
	if m != nil {
		return m.Borrower
	}
	return ""
}

func (m *QueryLoanByIdResponse) GetAmountOut() string {
	if m != nil {
		return m.AmountOut
	}
	return ""
}

func (m *QueryLoanByIdResponse) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *QueryLoanByIdResponse) GetOracleTicker() string {
	if m != nil {
		return m.OracleTicker
	}
	return ""
}

// YieldPercentage
type QueryYieldPercentageRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryYieldPercentageRequest) Reset()         { *m = QueryYieldPercentageRequest{} }
func (m *QueryYieldPercentageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryYieldPercentageRequest) ProtoMessage()    {}
func (*QueryYieldPercentageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{18}
}
func (m *QueryYieldPercentageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryYieldPercentageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryYieldPercentageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryYieldPercentageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryYieldPercentageRequest.Merge(m, src)
}
func (m *QueryYieldPercentageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryYieldPercentageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryYieldPercentageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryYieldPercentageRequest proto.InternalMessageInfo

func (m *QueryYieldPercentageRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryYieldPercentageResponse struct {
	RealRate     int64  `protobuf:"varint,1,opt,name=RealRate,proto3" json:"RealRate,omitempty"`
	BorrowRate   int64  `protobuf:"varint,2,opt,name=BorrowRate,proto3" json:"BorrowRate,omitempty"`
	RealYield    int64  `protobuf:"varint,3,opt,name=RealYield,proto3" json:"RealYield,omitempty"`
	GrowYield    int64  `protobuf:"varint,4,opt,name=GrowYield,proto3" json:"GrowYield,omitempty"`
	ActualAction string `protobuf:"bytes,5,opt,name=ActualAction,proto3" json:"ActualAction,omitempty"`
	Difference   int64  `protobuf:"varint,6,opt,name=Difference,proto3" json:"Difference,omitempty"`
}

func (m *QueryYieldPercentageResponse) Reset()         { *m = QueryYieldPercentageResponse{} }
func (m *QueryYieldPercentageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryYieldPercentageResponse) ProtoMessage()    {}
func (*QueryYieldPercentageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc51b5096e6b6c92, []int{19}
}
func (m *QueryYieldPercentageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryYieldPercentageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryYieldPercentageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryYieldPercentageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryYieldPercentageResponse.Merge(m, src)
}
func (m *QueryYieldPercentageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryYieldPercentageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryYieldPercentageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryYieldPercentageResponse proto.InternalMessageInfo

func (m *QueryYieldPercentageResponse) GetRealRate() int64 {
	if m != nil {
		return m.RealRate
	}
	return 0
}

func (m *QueryYieldPercentageResponse) GetBorrowRate() int64 {
	if m != nil {
		return m.BorrowRate
	}
	return 0
}

func (m *QueryYieldPercentageResponse) GetRealYield() int64 {
	if m != nil {
		return m.RealYield
	}
	return 0
}

func (m *QueryYieldPercentageResponse) GetGrowYield() int64 {
	if m != nil {
		return m.GrowYield
	}
	return 0
}

func (m *QueryYieldPercentageResponse) GetActualAction() string {
	if m != nil {
		return m.ActualAction
	}
	return ""
}

func (m *QueryYieldPercentageResponse) GetDifference() int64 {
	if m != nil {
		return m.Difference
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "core.grow.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "core.grow.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryLendAssetByLendAssetIdRequest)(nil), "core.grow.v1beta1.QueryLendAssetByLendAssetIdRequest")
	proto.RegisterType((*QueryLendAssetByLendAssetIdResponse)(nil), "core.grow.v1beta1.QueryLendAssetByLendAssetIdResponse")
	proto.RegisterType((*QueryPositionByIdRequest)(nil), "core.grow.v1beta1.QueryPositionByIdRequest")
	proto.RegisterType((*QueryPositionResponse)(nil), "core.grow.v1beta1.QueryPositionResponse")
	proto.RegisterType((*QueryPositionByCreatorRequest)(nil), "core.grow.v1beta1.QueryPositionByCreatorRequest")
	proto.RegisterType((*QueryAllPositionRequest)(nil), "core.grow.v1beta1.QueryAllPositionRequest")
	proto.RegisterType((*QueryAllPositionResponse)(nil), "core.grow.v1beta1.QueryAllPositionResponse")
	proto.RegisterType((*QueryAllLiquidatorPositionRequest)(nil), "core.grow.v1beta1.QueryAllLiquidatorPositionRequest")
	proto.RegisterType((*QueryAllLiquidatorPositionResponse)(nil), "core.grow.v1beta1.QueryAllLiquidatorPositionResponse")
	proto.RegisterType((*QueryLiquidatorPositionByCreatorRequest)(nil), "core.grow.v1beta1.QueryLiquidatorPositionByCreatorRequest")
	proto.RegisterType((*QueryLiquidatorPositionByCreatorResponse)(nil), "core.grow.v1beta1.QueryLiquidatorPositionByCreatorResponse")
	proto.RegisterType((*QueryLiquidatorPositionByIdRequest)(nil), "core.grow.v1beta1.QueryLiquidatorPositionByIdRequest")
	proto.RegisterType((*QueryAllFundAddressRequest)(nil), "core.grow.v1beta1.QueryAllFundAddressRequest")
	proto.RegisterType((*QueryAllFundAddressResponse)(nil), "core.grow.v1beta1.QueryAllFundAddressResponse")
	proto.RegisterType((*QueryLoanByIdRequest)(nil), "core.grow.v1beta1.QueryLoanByIdRequest")
	proto.RegisterType((*QueryLoanByIdResponse)(nil), "core.grow.v1beta1.QueryLoanByIdResponse")
	proto.RegisterType((*QueryYieldPercentageRequest)(nil), "core.grow.v1beta1.QueryYieldPercentageRequest")
	proto.RegisterType((*QueryYieldPercentageResponse)(nil), "core.grow.v1beta1.QueryYieldPercentageResponse")
}

func init() { proto.RegisterFile("core/grow/v1beta1/query.proto", fileDescriptor_fc51b5096e6b6c92) }

var fileDescriptor_fc51b5096e6b6c92 = []byte{
	// 1291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xc6, 0xa9, 0x69, 0x5e, 0xda, 0xa2, 0x4e, 0xd3, 0xd6, 0xdd, 0x38, 0x8e, 0xbb, 0x69,
	0x12, 0x93, 0x36, 0xde, 0x24, 0xb4, 0x55, 0x09, 0x48, 0x60, 0xb7, 0x02, 0x22, 0x15, 0x35, 0xd9,
	0xb4, 0x07, 0x40, 0x1c, 0x26, 0xde, 0x89, 0x59, 0x65, 0xbd, 0xe3, 0xcc, 0xae, 0x1b, 0xa2, 0xaa,
	0x42, 0x82, 0x03, 0x07, 0x2e, 0x48, 0x3d, 0x20, 0xce, 0x1c, 0x38, 0x70, 0x83, 0x8f, 0x00, 0x87,
	0x1e, 0x23, 0x21, 0xa1, 0x8a, 0x43, 0x41, 0x09, 0x9f, 0x80, 0x4f, 0x80, 0xe6, 0xcf, 0x7a, 0x6d,
	0xef, 0x9f, 0x24, 0x70, 0xf3, 0xbc, 0xdf, 0x9b, 0x37, 0xbf, 0xdf, 0xdb, 0x37, 0xef, 0x8d, 0x61,
	0xb2, 0x41, 0x19, 0x31, 0x9b, 0x8c, 0xee, 0x9a, 0x8f, 0x97, 0x36, 0x49, 0x80, 0x97, 0xcc, 0x9d,
	0x0e, 0x61, 0x7b, 0xd5, 0x36, 0xa3, 0x01, 0x45, 0xe7, 0x39, 0x5c, 0xe5, 0x70, 0x55, 0xc1, 0xfa,
	0x78, 0x93, 0x36, 0xa9, 0x40, 0x4d, 0xfe, 0x4b, 0x3a, 0xea, 0xc5, 0x26, 0xa5, 0x4d, 0x97, 0x98,
	0xb8, 0xed, 0x98, 0xd8, 0xf3, 0x68, 0x80, 0x03, 0x87, 0x7a, 0xbe, 0x42, 0xe7, 0x1b, 0xd4, 0x6f,
	0x51, 0xdf, 0xdc, 0xc4, 0x3e, 0x91, 0xf1, 0xbb, 0xa7, 0xb5, 0x71, 0xd3, 0xf1, 0x84, 0xb3, 0xf2,
	0x2d, 0xc5, 0x19, 0xb5, 0x31, 0xc3, 0xad, 0x30, 0x56, 0x31, 0x8e, 0xbb, 0x14, 0x7b, 0x19, 0x28,
	0xf1, 0x6c, 0x85, 0x4e, 0x27, 0xa0, 0xce, 0x4e, 0xc7, 0xb1, 0x07, 0x08, 0x28, 0xb2, 0xde, 0x76,
	0xd7, 0x8d, 0x2f, 0x24, 0x6e, 0x8c, 0x03, 0x5a, 0xe7, 0x12, 0xd6, 0x04, 0x2b, 0x8b, 0xec, 0x74,
	0x88, 0x1f, 0x18, 0xef, 0xc3, 0x85, 0x3e, 0xab, 0xdf, 0xa6, 0x9e, 0x4f, 0xd0, 0x12, 0xe4, 0x25,
	0xfb, 0x82, 0x56, 0xd6, 0x2a, 0x63, 0xcb, 0x57, 0xaa, 0xb1, 0x8c, 0x56, 0xd5, 0x16, 0xe5, 0x68,
	0xdc, 0x04, 0x43, 0x44, 0xba, 0x4f, 0x3c, 0xbb, 0xe6, 0xfb, 0x24, 0xa8, 0x47, 0x3f, 0x57, 0x6d,
	0x75, 0x1e, 0x3a, 0x07, 0xc3, 0x8e, 0x2d, 0x82, 0x8e, 0x5a, 0xc3, 0x8e, 0x6d, 0xec, 0x6b, 0x30,
	0x9d, 0xb9, 0x4d, 0x11, 0x2a, 0xc3, 0x58, 0x8f, 0x59, 0x05, 0xe8, 0x35, 0x21, 0x0c, 0x67, 0x31,
	0xff, 0xf9, 0x01, 0x09, 0xb0, 0x8d, 0x03, 0x5c, 0x18, 0x16, 0xcc, 0x27, 0xab, 0x32, 0x2f, 0x55,
	0x91, 0x8a, 0x90, 0x7b, 0xe8, 0x54, 0x2f, 0x3e, 0x7f, 0x39, 0x35, 0xf4, 0xcf, 0xcb, 0xa9, 0xf1,
	0x3d, 0xdc, 0x72, 0x57, 0x8c, 0xbe, 0x08, 0x86, 0xd5, 0x1f, 0x11, 0x5d, 0x83, 0xb3, 0x94, 0xe1,
	0x86, 0x4b, 0x42, 0x1a, 0x39, 0x41, 0xa3, 0xdf, 0x68, 0xcc, 0x43, 0x41, 0xa6, 0x94, 0xfa, 0x0e,
	0xff, 0x3e, 0xf5, 0xbd, 0x74, 0xf9, 0x7f, 0x6a, 0x70, 0xb1, 0xcf, 0xb9, 0x2b, 0xb8, 0x00, 0xaf,
	0x34, 0x18, 0xc1, 0x01, 0x65, 0xca, 0x3d, 0x5c, 0xa2, 0x22, 0x8c, 0xda, 0xa4, 0xcd, 0xfd, 0x57,
	0x6d, 0x21, 0x72, 0xd4, 0x8a, 0x0c, 0xa8, 0x04, 0xd0, 0xa0, 0xae, 0x8b, 0x03, 0xc2, 0xb0, 0xab,
	0x08, 0xf6, 0x58, 0x90, 0x01, 0x67, 0x24, 0xdd, 0x87, 0x4e, 0x63, 0x9b, 0xb0, 0xc2, 0x88, 0xf0,
	0xe8, 0xb3, 0xa1, 0x45, 0xb8, 0xb0, 0x49, 0x19, 0xa3, 0xbb, 0xc4, 0xae, 0xb5, 0x68, 0xc7, 0x0b,
	0x56, 0xbd, 0x47, 0x1b, 0xf7, 0x0a, 0xa7, 0xca, 0x5a, 0x65, 0xc4, 0x4a, 0x82, 0x38, 0x5b, 0x5e,
	0xcd, 0xab, 0xb6, 0x5f, 0xc8, 0x97, 0x73, 0x9c, 0xad, 0x5a, 0x1a, 0x6f, 0xc0, 0xe4, 0x40, 0x36,
	0xee, 0x4a, 0x1d, 0x61, 0x4a, 0x52, 0x85, 0x1a, 0x57, 0xe0, 0xb2, 0xd8, 0x5a, 0x73, 0xdd, 0x28,
	0x3d, 0xb2, 0x6c, 0x3f, 0x56, 0x39, 0xee, 0x83, 0x54, 0xe6, 0xde, 0x86, 0xd1, 0xd0, 0xc6, 0xcb,
	0x37, 0x57, 0x19, 0x5b, 0x9e, 0x48, 0x2a, 0xdf, 0x90, 0xd0, 0x08, 0x2f, 0x01, 0x2b, 0xda, 0x63,
	0x4c, 0xc3, 0xd5, 0x30, 0xf8, 0x7d, 0x75, 0xcd, 0x28, 0x1b, 0x64, 0xf0, 0xa5, 0xa6, 0xea, 0x3d,
	0xc5, 0x4b, 0x91, 0xf9, 0x04, 0x2e, 0x44, 0xa8, 0x1f, 0xc2, 0x8a, 0xd6, 0x4c, 0x02, 0xad, 0x78,
	0x2c, 0x45, 0x30, 0x29, 0x8e, 0x71, 0x17, 0xe6, 0xe4, 0xed, 0x89, 0xef, 0x3a, 0x7e, 0x9e, 0x7f,
	0xd7, 0xa0, 0x72, 0x74, 0x14, 0x25, 0x68, 0x19, 0xc6, 0xdd, 0x98, 0x5b, 0xf7, 0x46, 0x26, 0x62,
	0xfc, 0xde, 0xc8, 0xa2, 0x09, 0xef, 0x8d, 0xac, 0xda, 0x7e, 0x23, 0xaf, 0xdc, 0x68, 0x77, 0x58,
	0xb9, 0x91, 0x05, 0x5d, 0x82, 0x3c, 0x16, 0x25, 0xa7, 0x6a, 0x56, 0xad, 0xb8, 0xb0, 0x36, 0x23,
	0x2d, 0xa7, 0xd3, 0x52, 0x15, 0x1a, 0x2e, 0xa3, 0x96, 0x94, 0xa0, 0x2b, 0xfd, 0x4e, 0x16, 0x41,
	0x0f, 0x3f, 0xec, 0xbb, 0x1d, 0xcf, 0xae, 0xd9, 0x36, 0x23, 0x7e, 0xb7, 0x61, 0xfe, 0xa2, 0xc1,
	0x44, 0x22, 0xac, 0xf2, 0x73, 0x03, 0xce, 0x3f, 0xda, 0x58, 0xb7, 0x88, 0x4f, 0xd8, 0x63, 0xa2,
	0x40, 0x15, 0x3c, 0x0e, 0xa0, 0x3b, 0x70, 0xf9, 0x3d, 0x46, 0x77, 0x3f, 0x74, 0x88, 0x6b, 0x0f,
	0xec, 0x91, 0x39, 0x4a, 0x83, 0xd1, 0x5b, 0x70, 0x85, 0x43, 0x1b, 0x01, 0xde, 0x76, 0xbc, 0xe6,
	0xc0, 0x5e, 0x99, 0xbc, 0x74, 0x07, 0x63, 0x16, 0xc6, 0x65, 0x66, 0x28, 0xce, 0xcc, 0xc5, 0x8f,
	0x61, 0x7f, 0x8a, 0x1c, 0x95, 0xce, 0x4b, 0x90, 0x97, 0x57, 0x5c, 0x79, 0xab, 0x15, 0xd2, 0xe1,
	0xb4, 0x6a, 0x10, 0x4c, 0x49, 0xe8, 0xae, 0x79, 0xe7, 0x92, 0xdf, 0xec, 0x41, 0x27, 0x50, 0x1c,
	0x23, 0x03, 0x47, 0xfd, 0x00, 0xb3, 0xe0, 0xa1, 0xd3, 0x22, 0xe2, 0x13, 0x8f, 0x58, 0x91, 0x21,
	0xd6, 0xb7, 0x4e, 0xc5, 0xfb, 0x96, 0xb1, 0xa0, 0x3e, 0x8d, 0xc8, 0xd7, 0x1a, 0x61, 0x0d, 0xe2,
	0x05, 0xb8, 0x49, 0xd2, 0xc4, 0xfd, 0xa1, 0x41, 0x31, 0xd9, 0x5f, 0x69, 0xd4, 0xe1, 0xb4, 0x45,
	0xb0, 0x6b, 0xe1, 0x80, 0x88, 0x6d, 0x39, 0xab, 0xbb, 0xe6, 0xd5, 0x5a, 0x17, 0xba, 0x04, 0x3a,
	0x2c, 0xd0, 0x1e, 0x0b, 0x57, 0xc3, 0x7d, 0x45, 0x68, 0xa1, 0x35, 0x67, 0x45, 0x06, 0x8e, 0x76,
	0x3f, 0xac, 0xd0, 0x9a, 0xb3, 0x22, 0x03, 0xd7, 0x5a, 0x6b, 0x04, 0x1d, 0xec, 0xd6, 0x1a, 0xa2,
	0x5b, 0x28, 0xad, 0xbd, 0x36, 0x7e, 0xfe, 0x3d, 0x67, 0x6b, 0x8b, 0x30, 0xe2, 0x35, 0x48, 0x21,
	0x2f, 0xcf, 0x8f, 0x2c, 0xcb, 0xdf, 0x9f, 0x83, 0x53, 0x42, 0x1c, 0xfa, 0x1c, 0xf2, 0x72, 0x54,
	0xa3, 0xa4, 0x7e, 0x13, 0x7f, 0x13, 0xe8, 0xb3, 0x47, 0xb9, 0xc9, 0xf4, 0x18, 0xb3, 0x5f, 0xfc,
	0xf6, 0xf7, 0xb3, 0xe1, 0x32, 0x2a, 0x99, 0xf1, 0xf7, 0x89, 0x58, 0xc8, 0x97, 0x01, 0xfa, 0x49,
	0x83, 0x4b, 0xc9, 0xe3, 0x1d, 0xdd, 0x4a, 0x3b, 0x2a, 0xf3, 0x15, 0xa1, 0xdf, 0x3e, 0xe9, 0x36,
	0xc5, 0xf8, 0x35, 0xc1, 0x78, 0x1a, 0x5d, 0x35, 0x93, 0xdf, 0x5b, 0x62, 0xdc, 0x9b, 0x4f, 0x1c,
	0xfb, 0x29, 0x7a, 0xa6, 0xc1, 0x99, 0xde, 0x6e, 0x81, 0xae, 0xa7, 0x66, 0x25, 0xde, 0x53, 0xf4,
	0xca, 0x51, 0xce, 0x5d, 0x4a, 0x37, 0x04, 0xa5, 0x59, 0x74, 0x2d, 0x81, 0x52, 0xbb, 0x27, 0xb2,
	0x64, 0xf5, 0x83, 0x06, 0xe7, 0x63, 0xbd, 0x19, 0x2d, 0x1e, 0x4d, 0xad, 0x7f, 0x18, 0x9c, 0x80,
	0xdf, 0x6d, 0xc1, 0x6f, 0x11, 0x55, 0x33, 0xf9, 0xa9, 0xf0, 0xe6, 0x13, 0x35, 0x53, 0x9e, 0xa2,
	0xaf, 0x35, 0x18, 0xeb, 0x99, 0xce, 0x68, 0x3e, 0xed, 0xc4, 0xf8, 0x74, 0xd7, 0xaf, 0x1f, 0xcb,
	0x57, 0x11, 0x9c, 0x16, 0x04, 0x27, 0xd1, 0x44, 0x06, 0x41, 0xf4, 0xb3, 0x06, 0x17, 0x13, 0x07,
	0x35, 0xba, 0x99, 0x71, 0x56, 0xea, 0xf4, 0xd7, 0x6f, 0x9d, 0x70, 0x97, 0xe2, 0xba, 0x20, 0xb8,
	0xce, 0xa1, 0x19, 0x33, 0xfd, 0x45, 0x4f, 0x59, 0x97, 0xf5, 0x0b, 0x0d, 0x26, 0x32, 0x66, 0x32,
	0x5a, 0x49, 0xbd, 0x06, 0x47, 0x3e, 0x07, 0xf4, 0x37, 0xff, 0xd3, 0x5e, 0xa5, 0xe3, 0x1d, 0xa1,
	0x63, 0x05, 0xdd, 0xc9, 0xd4, 0xb1, 0x96, 0x51, 0x1e, 0xbf, 0xf2, 0x9e, 0x90, 0x38, 0x96, 0x33,
	0x7a, 0x42, 0xd6, 0x18, 0xff, 0x7f, 0x82, 0xb2, 0xaa, 0xdc, 0x4d, 0x3c, 0x56, 0xde, 0xc7, 0x6f,
	0x35, 0x38, 0xd7, 0xff, 0x10, 0x40, 0x0b, 0x19, 0xa5, 0x11, 0x7f, 0x4f, 0xe8, 0xd5, 0xe3, 0xba,
	0x1f, 0xa3, 0xe9, 0x6e, 0xf5, 0xd0, 0xf8, 0x4a, 0x83, 0xd3, 0xe1, 0xd0, 0x46, 0x73, 0xa9, 0xb9,
	0xe9, 0x9f, 0xff, 0xe9, 0x7d, 0x61, 0x70, 0xfe, 0x1b, 0x15, 0xc1, 0xc3, 0x40, 0x65, 0x33, 0xf9,
	0x8f, 0x6d, 0x94, 0xa3, 0xef, 0x34, 0x78, 0x75, 0x60, 0xc2, 0xa2, 0x54, 0xd5, 0xc9, 0xa3, 0x5b,
	0x37, 0x8f, 0xed, 0xaf, 0xe8, 0xcd, 0x08, 0x7a, 0x53, 0x68, 0x32, 0x81, 0xde, 0x1e, 0xdf, 0x23,
	0xb8, 0xd5, 0xeb, 0xcf, 0x0f, 0x4a, 0xda, 0xfe, 0x41, 0x49, 0xfb, 0xeb, 0xa0, 0xa4, 0x7d, 0x73,
	0x58, 0x1a, 0xda, 0x3f, 0x2c, 0x0d, 0xbd, 0x38, 0x2c, 0x0d, 0x7d, 0x54, 0x69, 0x3a, 0xc1, 0xa7,
	0x9d, 0xcd, 0x6a, 0x83, 0xb6, 0xcc, 0xf5, 0x0e, 0xb6, 0x19, 0x0e, 0xc8, 0x03, 0xd6, 0x94, 0xe1,
	0x3e, 0x93, 0x01, 0x83, 0xbd, 0x36, 0xf1, 0x37, 0xf3, 0xe2, 0xff, 0xf5, 0xeb, 0xff, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x68, 0x65, 0xb8, 0xf4, 0x94, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	LendAssetByLendAssetId(ctx context.Context, in *QueryLendAssetByLendAssetIdRequest, opts ...grpc.CallOption) (*QueryLendAssetByLendAssetIdResponse, error)
	PositionById(ctx context.Context, in *QueryPositionByIdRequest, opts ...grpc.CallOption) (*QueryPositionResponse, error)
	PositionByCreator(ctx context.Context, in *QueryPositionByCreatorRequest, opts ...grpc.CallOption) (*QueryPositionResponse, error)
	AllPosition(ctx context.Context, in *QueryAllPositionRequest, opts ...grpc.CallOption) (*QueryAllPositionResponse, error)
	AllLiquidatorPosition(ctx context.Context, in *QueryAllLiquidatorPositionRequest, opts ...grpc.CallOption) (*QueryAllLiquidatorPositionResponse, error)
	LiquidatorPositionByCreator(ctx context.Context, in *QueryLiquidatorPositionByCreatorRequest, opts ...grpc.CallOption) (*QueryLiquidatorPositionByCreatorResponse, error)
	LiquidatorPositionById(ctx context.Context, in *QueryLiquidatorPositionByIdRequest, opts ...grpc.CallOption) (*QueryLiquidatorPositionByCreatorResponse, error)
	AllFundAddress(ctx context.Context, in *QueryAllFundAddressRequest, opts ...grpc.CallOption) (*QueryAllFundAddressResponse, error)
	LoanById(ctx context.Context, in *QueryLoanByIdRequest, opts ...grpc.CallOption) (*QueryLoanByIdResponse, error)
	YieldPercentage(ctx context.Context, in *QueryYieldPercentageRequest, opts ...grpc.CallOption) (*QueryYieldPercentageResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LendAssetByLendAssetId(ctx context.Context, in *QueryLendAssetByLendAssetIdRequest, opts ...grpc.CallOption) (*QueryLendAssetByLendAssetIdResponse, error) {
	out := new(QueryLendAssetByLendAssetIdResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/LendAssetByLendAssetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PositionById(ctx context.Context, in *QueryPositionByIdRequest, opts ...grpc.CallOption) (*QueryPositionResponse, error) {
	out := new(QueryPositionResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/PositionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PositionByCreator(ctx context.Context, in *QueryPositionByCreatorRequest, opts ...grpc.CallOption) (*QueryPositionResponse, error) {
	out := new(QueryPositionResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/PositionByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllPosition(ctx context.Context, in *QueryAllPositionRequest, opts ...grpc.CallOption) (*QueryAllPositionResponse, error) {
	out := new(QueryAllPositionResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/AllPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllLiquidatorPosition(ctx context.Context, in *QueryAllLiquidatorPositionRequest, opts ...grpc.CallOption) (*QueryAllLiquidatorPositionResponse, error) {
	out := new(QueryAllLiquidatorPositionResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/AllLiquidatorPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidatorPositionByCreator(ctx context.Context, in *QueryLiquidatorPositionByCreatorRequest, opts ...grpc.CallOption) (*QueryLiquidatorPositionByCreatorResponse, error) {
	out := new(QueryLiquidatorPositionByCreatorResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/LiquidatorPositionByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidatorPositionById(ctx context.Context, in *QueryLiquidatorPositionByIdRequest, opts ...grpc.CallOption) (*QueryLiquidatorPositionByCreatorResponse, error) {
	out := new(QueryLiquidatorPositionByCreatorResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/LiquidatorPositionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllFundAddress(ctx context.Context, in *QueryAllFundAddressRequest, opts ...grpc.CallOption) (*QueryAllFundAddressResponse, error) {
	out := new(QueryAllFundAddressResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/AllFundAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LoanById(ctx context.Context, in *QueryLoanByIdRequest, opts ...grpc.CallOption) (*QueryLoanByIdResponse, error) {
	out := new(QueryLoanByIdResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/LoanById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) YieldPercentage(ctx context.Context, in *QueryYieldPercentageRequest, opts ...grpc.CallOption) (*QueryYieldPercentageResponse, error) {
	out := new(QueryYieldPercentageResponse)
	err := c.cc.Invoke(ctx, "/core.grow.v1beta1.Query/YieldPercentage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	LendAssetByLendAssetId(context.Context, *QueryLendAssetByLendAssetIdRequest) (*QueryLendAssetByLendAssetIdResponse, error)
	PositionById(context.Context, *QueryPositionByIdRequest) (*QueryPositionResponse, error)
	PositionByCreator(context.Context, *QueryPositionByCreatorRequest) (*QueryPositionResponse, error)
	AllPosition(context.Context, *QueryAllPositionRequest) (*QueryAllPositionResponse, error)
	AllLiquidatorPosition(context.Context, *QueryAllLiquidatorPositionRequest) (*QueryAllLiquidatorPositionResponse, error)
	LiquidatorPositionByCreator(context.Context, *QueryLiquidatorPositionByCreatorRequest) (*QueryLiquidatorPositionByCreatorResponse, error)
	LiquidatorPositionById(context.Context, *QueryLiquidatorPositionByIdRequest) (*QueryLiquidatorPositionByCreatorResponse, error)
	AllFundAddress(context.Context, *QueryAllFundAddressRequest) (*QueryAllFundAddressResponse, error)
	LoanById(context.Context, *QueryLoanByIdRequest) (*QueryLoanByIdResponse, error)
	YieldPercentage(context.Context, *QueryYieldPercentageRequest) (*QueryYieldPercentageResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) LendAssetByLendAssetId(ctx context.Context, req *QueryLendAssetByLendAssetIdRequest) (*QueryLendAssetByLendAssetIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LendAssetByLendAssetId not implemented")
}
func (*UnimplementedQueryServer) PositionById(ctx context.Context, req *QueryPositionByIdRequest) (*QueryPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionById not implemented")
}
func (*UnimplementedQueryServer) PositionByCreator(ctx context.Context, req *QueryPositionByCreatorRequest) (*QueryPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionByCreator not implemented")
}
func (*UnimplementedQueryServer) AllPosition(ctx context.Context, req *QueryAllPositionRequest) (*QueryAllPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllPosition not implemented")
}
func (*UnimplementedQueryServer) AllLiquidatorPosition(ctx context.Context, req *QueryAllLiquidatorPositionRequest) (*QueryAllLiquidatorPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllLiquidatorPosition not implemented")
}
func (*UnimplementedQueryServer) LiquidatorPositionByCreator(ctx context.Context, req *QueryLiquidatorPositionByCreatorRequest) (*QueryLiquidatorPositionByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidatorPositionByCreator not implemented")
}
func (*UnimplementedQueryServer) LiquidatorPositionById(ctx context.Context, req *QueryLiquidatorPositionByIdRequest) (*QueryLiquidatorPositionByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidatorPositionById not implemented")
}
func (*UnimplementedQueryServer) AllFundAddress(ctx context.Context, req *QueryAllFundAddressRequest) (*QueryAllFundAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllFundAddress not implemented")
}
func (*UnimplementedQueryServer) LoanById(ctx context.Context, req *QueryLoanByIdRequest) (*QueryLoanByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanById not implemented")
}
func (*UnimplementedQueryServer) YieldPercentage(ctx context.Context, req *QueryYieldPercentageRequest) (*QueryYieldPercentageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method YieldPercentage not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LendAssetByLendAssetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLendAssetByLendAssetIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LendAssetByLendAssetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/LendAssetByLendAssetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LendAssetByLendAssetId(ctx, req.(*QueryLendAssetByLendAssetIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PositionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPositionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PositionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/PositionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PositionById(ctx, req.(*QueryPositionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PositionByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPositionByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PositionByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/PositionByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PositionByCreator(ctx, req.(*QueryPositionByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/AllPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllPosition(ctx, req.(*QueryAllPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllLiquidatorPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLiquidatorPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllLiquidatorPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/AllLiquidatorPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllLiquidatorPosition(ctx, req.(*QueryAllLiquidatorPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidatorPositionByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidatorPositionByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidatorPositionByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/LiquidatorPositionByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidatorPositionByCreator(ctx, req.(*QueryLiquidatorPositionByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidatorPositionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidatorPositionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidatorPositionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/LiquidatorPositionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidatorPositionById(ctx, req.(*QueryLiquidatorPositionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllFundAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFundAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllFundAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/AllFundAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllFundAddress(ctx, req.(*QueryAllFundAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LoanById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoanByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LoanById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/LoanById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LoanById(ctx, req.(*QueryLoanByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_YieldPercentage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryYieldPercentageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).YieldPercentage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.grow.v1beta1.Query/YieldPercentage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).YieldPercentage(ctx, req.(*QueryYieldPercentageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.grow.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "LendAssetByLendAssetId",
			Handler:    _Query_LendAssetByLendAssetId_Handler,
		},
		{
			MethodName: "PositionById",
			Handler:    _Query_PositionById_Handler,
		},
		{
			MethodName: "PositionByCreator",
			Handler:    _Query_PositionByCreator_Handler,
		},
		{
			MethodName: "AllPosition",
			Handler:    _Query_AllPosition_Handler,
		},
		{
			MethodName: "AllLiquidatorPosition",
			Handler:    _Query_AllLiquidatorPosition_Handler,
		},
		{
			MethodName: "LiquidatorPositionByCreator",
			Handler:    _Query_LiquidatorPositionByCreator_Handler,
		},
		{
			MethodName: "LiquidatorPositionById",
			Handler:    _Query_LiquidatorPositionById_Handler,
		},
		{
			MethodName: "AllFundAddress",
			Handler:    _Query_AllFundAddress_Handler,
		},
		{
			MethodName: "LoanById",
			Handler:    _Query_LoanById_Handler,
		},
		{
			MethodName: "YieldPercentage",
			Handler:    _Query_YieldPercentage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/grow/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLendAssetByLendAssetIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLendAssetByLendAssetIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLendAssetByLendAssetIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLendAssetByLendAssetIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLendAssetByLendAssetIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLendAssetByLendAssetIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OracleAssetId) > 0 {
		i -= len(m.OracleAssetId)
		copy(dAtA[i:], m.OracleAssetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OracleAssetId)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.AssetMetadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.LendAssetId) > 0 {
		i -= len(m.LendAssetId)
		copy(dAtA[i:], m.LendAssetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LendAssetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPositionByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoanIds) > 0 {
		for iNdEx := len(m.LoanIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LoanIds[iNdEx])
			copy(dAtA[i:], m.LoanIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.LoanIds[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.BorrowedAmountInUSD != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BorrowedAmountInUSD))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OracleTicker) > 0 {
		i -= len(m.OracleTicker)
		copy(dAtA[i:], m.OracleTicker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OracleTicker)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Collateral) > 0 {
		i -= len(m.Collateral)
		copy(dAtA[i:], m.Collateral)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Collateral)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DepositId) > 0 {
		i -= len(m.DepositId)
		copy(dAtA[i:], m.DepositId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DepositId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPositionByCreatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionByCreatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionByCreatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLiquidatorPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLiquidatorPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLiquidatorPositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllLiquidatorPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLiquidatorPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLiquidatorPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LiquidatorsPosition) > 0 {
		for iNdEx := len(m.LiquidatorsPosition) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidatorsPosition[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidatorPositionByCreatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidatorPositionByCreatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidatorPositionByCreatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidatorPositionByCreatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidatorPositionByCreatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidatorPositionByCreatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Premium != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Premium))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Liquidator) > 0 {
		i -= len(m.Liquidator)
		copy(dAtA[i:], m.Liquidator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Liquidator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BorrowAssetId) > 0 {
		i -= len(m.BorrowAssetId)
		copy(dAtA[i:], m.BorrowAssetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BorrowAssetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LiquidatorPositionId) > 0 {
		i -= len(m.LiquidatorPositionId)
		copy(dAtA[i:], m.LiquidatorPositionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LiquidatorPositionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidatorPositionByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidatorPositionByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidatorPositionByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFundAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFundAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFundAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllFundAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFundAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFundAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GrowStakingReserveAddress) > 0 {
		i -= len(m.GrowStakingReserveAddress)
		copy(dAtA[i:], m.GrowStakingReserveAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GrowStakingReserveAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GrowYieldReserveAddress) > 0 {
		i -= len(m.GrowYieldReserveAddress)
		copy(dAtA[i:], m.GrowYieldReserveAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GrowYieldReserveAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.USQReserveAddress) > 0 {
		i -= len(m.USQReserveAddress)
		copy(dAtA[i:], m.USQReserveAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.USQReserveAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoanByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoanByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoanByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoanByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoanByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoanByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OracleTicker) > 0 {
		i -= len(m.OracleTicker)
		copy(dAtA[i:], m.OracleTicker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OracleTicker)))
		i--
		dAtA[i] = 0x2a
	}
	if m.StartTime != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AmountOut) > 0 {
		i -= len(m.AmountOut)
		copy(dAtA[i:], m.AmountOut)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountOut)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Borrower) > 0 {
		i -= len(m.Borrower)
		copy(dAtA[i:], m.Borrower)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Borrower)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LoanId) > 0 {
		i -= len(m.LoanId)
		copy(dAtA[i:], m.LoanId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LoanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryYieldPercentageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryYieldPercentageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryYieldPercentageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryYieldPercentageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryYieldPercentageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryYieldPercentageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Difference != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Difference))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ActualAction) > 0 {
		i -= len(m.ActualAction)
		copy(dAtA[i:], m.ActualAction)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ActualAction)))
		i--
		dAtA[i] = 0x2a
	}
	if m.GrowYield != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GrowYield))
		i--
		dAtA[i] = 0x20
	}
	if m.RealYield != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RealYield))
		i--
		dAtA[i] = 0x18
	}
	if m.BorrowRate != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BorrowRate))
		i--
		dAtA[i] = 0x10
	}
	if m.RealRate != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RealRate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLendAssetByLendAssetIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLendAssetByLendAssetIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LendAssetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.AssetMetadata.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.OracleAssetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPositionByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DepositId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Collateral)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OracleTicker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BorrowedAmountInUSD != 0 {
		n += 1 + sovQuery(uint64(m.BorrowedAmountInUSD))
	}
	if len(m.LoanIds) > 0 {
		for _, s := range m.LoanIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPositionByCreatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllLiquidatorPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllLiquidatorPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiquidatorsPosition) > 0 {
		for _, e := range m.LiquidatorsPosition {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLiquidatorPositionByCreatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidatorPositionByCreatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LiquidatorPositionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BorrowAssetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Liquidator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Premium != 0 {
		n += 1 + sovQuery(uint64(m.Premium))
	}
	return n
}

func (m *QueryLiquidatorPositionByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFundAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllFundAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.USQReserveAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.GrowYieldReserveAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.GrowStakingReserveAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLoanByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLoanByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoanId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Borrower)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountOut)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovQuery(uint64(m.StartTime))
	}
	l = len(m.OracleTicker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryYieldPercentageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryYieldPercentageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RealRate != 0 {
		n += 1 + sovQuery(uint64(m.RealRate))
	}
	if m.BorrowRate != 0 {
		n += 1 + sovQuery(uint64(m.BorrowRate))
	}
	if m.RealYield != 0 {
		n += 1 + sovQuery(uint64(m.RealYield))
	}
	if m.GrowYield != 0 {
		n += 1 + sovQuery(uint64(m.GrowYield))
	}
	l = len(m.ActualAction)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Difference != 0 {
		n += 1 + sovQuery(uint64(m.Difference))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLendAssetByLendAssetIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLendAssetByLendAssetIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLendAssetByLendAssetIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLendAssetByLendAssetIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLendAssetByLendAssetIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLendAssetByLendAssetIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LendAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LendAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssetMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collateral = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleTicker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleTicker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowedAmountInUSD", wireType)
			}
			m.BorrowedAmountInUSD = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorrowedAmountInUSD |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanIds = append(m.LoanIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionByCreatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionByCreatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionByCreatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, Position{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLiquidatorPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLiquidatorPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLiquidatorPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLiquidatorPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLiquidatorPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLiquidatorPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidatorsPosition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidatorsPosition = append(m.LiquidatorsPosition, LiquidatorPosition{})
			if err := m.LiquidatorsPosition[len(m.LiquidatorsPosition)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidatorPositionByCreatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidatorPositionByCreatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidatorPositionByCreatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidatorPositionByCreatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidatorPositionByCreatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidatorPositionByCreatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidatorPositionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidatorPositionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorrowAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premium", wireType)
			}
			m.Premium = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Premium |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidatorPositionByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidatorPositionByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidatorPositionByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFundAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFundAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFundAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFundAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFundAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFundAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field USQReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.USQReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrowYieldReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrowYieldReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrowStakingReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrowStakingReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoanByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoanByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoanByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoanByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoanByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoanByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Borrower = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleTicker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleTicker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryYieldPercentageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryYieldPercentageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryYieldPercentageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryYieldPercentageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryYieldPercentageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryYieldPercentageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealRate", wireType)
			}
			m.RealRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowRate", wireType)
			}
			m.BorrowRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorrowRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealYield", wireType)
			}
			m.RealYield = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealYield |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrowYield", wireType)
			}
			m.GrowYield = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrowYield |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActualAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Difference", wireType)
			}
			m.Difference = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Difference |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
