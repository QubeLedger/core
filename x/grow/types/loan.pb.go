// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core/grow/v1beta1/loan.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Loan struct {
	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount       string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Borrower     string `protobuf:"bytes,3,opt,name=borrower,proto3" json:"borrower,omitempty"`
	StartTime    string `protobuf:"bytes,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	OracleTicker string `protobuf:"bytes,5,opt,name=oracleTicker,proto3" json:"oracleTicker,omitempty"`
	AmountOut    string `protobuf:"bytes,6,opt,name=amountOut,proto3" json:"amountOut,omitempty"`
	Liquidation  bool   `protobuf:"varint,7,opt,name=liquidation,proto3" json:"liquidation,omitempty"`
	Liquidator   string `protobuf:"bytes,8,opt,name=liquidator,proto3" json:"liquidator,omitempty"`
	Hf           uint64 `protobuf:"varint,9,opt,name=hf,proto3" json:"hf,omitempty"`
}

func (m *Loan) Reset()         { *m = Loan{} }
func (m *Loan) String() string { return proto.CompactTextString(m) }
func (*Loan) ProtoMessage()    {}
func (*Loan) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fa0483de2887bd5, []int{0}
}
func (m *Loan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Loan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Loan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Loan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Loan.Merge(m, src)
}
func (m *Loan) XXX_Size() int {
	return m.Size()
}
func (m *Loan) XXX_DiscardUnknown() {
	xxx_messageInfo_Loan.DiscardUnknown(m)
}

var xxx_messageInfo_Loan proto.InternalMessageInfo

func (m *Loan) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Loan) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Loan) GetBorrower() string {
	if m != nil {
		return m.Borrower
	}
	return ""
}

func (m *Loan) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *Loan) GetOracleTicker() string {
	if m != nil {
		return m.OracleTicker
	}
	return ""
}

func (m *Loan) GetAmountOut() string {
	if m != nil {
		return m.AmountOut
	}
	return ""
}

func (m *Loan) GetLiquidation() bool {
	if m != nil {
		return m.Liquidation
	}
	return false
}

func (m *Loan) GetLiquidator() string {
	if m != nil {
		return m.Liquidator
	}
	return ""
}

func (m *Loan) GetHf() uint64 {
	if m != nil {
		return m.Hf
	}
	return 0
}

func init() {
	proto.RegisterType((*Loan)(nil), "core.grow.v1beta1.Loan")
}

func init() { proto.RegisterFile("core/grow/v1beta1/loan.proto", fileDescriptor_1fa0483de2887bd5) }

var fileDescriptor_1fa0483de2887bd5 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0xeb, 0xde, 0xde, 0xd2, 0x1a, 0x84, 0x84, 0x85, 0x90, 0x55, 0x55, 0x56, 0xd4, 0x29,
	0x53, 0xac, 0x8a, 0x37, 0xe8, 0x8c, 0x54, 0x11, 0x75, 0x62, 0x73, 0x12, 0x37, 0xb1, 0x48, 0x72,
	0xca, 0xa9, 0x43, 0xe1, 0x2d, 0x78, 0x2c, 0xc6, 0x8e, 0x8c, 0x28, 0x79, 0x0d, 0x06, 0x14, 0xa7,
	0x94, 0xb2, 0xf9, 0x7c, 0xdf, 0xd1, 0x6f, 0x9d, 0x9f, 0x4e, 0x63, 0x40, 0x2d, 0x53, 0x84, 0x9d,
	0x7c, 0x9e, 0x47, 0xda, 0xaa, 0xb9, 0xcc, 0x41, 0x95, 0xc1, 0x06, 0xc1, 0x02, 0xbb, 0x6a, 0x6d,
	0xd0, 0xda, 0xe0, 0x60, 0x27, 0xd7, 0x29, 0xa4, 0xe0, 0xac, 0x6c, 0x5f, 0xdd, 0xe2, 0xec, 0x8b,
	0xd0, 0xc1, 0x1d, 0xa8, 0x92, 0x5d, 0xd2, 0xbe, 0x49, 0x38, 0xf1, 0x88, 0x3f, 0x08, 0xfb, 0x26,
	0x61, 0x37, 0x74, 0xa8, 0x0a, 0xa8, 0x4a, 0xcb, 0xfb, 0x1e, 0xf1, 0xc7, 0xe1, 0x61, 0x62, 0x13,
	0x3a, 0x8a, 0x00, 0x11, 0x76, 0x1a, 0xf9, 0x3f, 0x67, 0x8e, 0x33, 0x9b, 0xd2, 0xf1, 0xd6, 0x2a,
	0xb4, 0x2b, 0x53, 0x68, 0x3e, 0x70, 0xf2, 0x17, 0xb0, 0x19, 0xbd, 0x00, 0x54, 0x71, 0xae, 0x57,
	0x26, 0x7e, 0xd4, 0xc8, 0xff, 0xbb, 0x85, 0x3f, 0xac, 0x4d, 0xe8, 0xfe, 0x59, 0x56, 0x96, 0x0f,
	0xbb, 0x84, 0x23, 0x60, 0x1e, 0x3d, 0xcf, 0xcd, 0x53, 0x65, 0x12, 0x65, 0x0d, 0x94, 0xfc, 0xcc,
	0x23, 0xfe, 0x28, 0x3c, 0x45, 0x4c, 0x50, 0xfa, 0x33, 0x02, 0xf2, 0x91, 0x0b, 0x38, 0x21, 0xed,
	0x95, 0xd9, 0x9a, 0x8f, 0xbb, 0x2b, 0xb3, 0xf5, 0x62, 0xf1, 0x5e, 0x0b, 0xb2, 0xaf, 0x05, 0xf9,
	0xac, 0x05, 0x79, 0x6b, 0x44, 0x6f, 0xdf, 0x88, 0xde, 0x47, 0x23, 0x7a, 0x0f, 0x7e, 0x6a, 0x6c,
	0x56, 0x45, 0x41, 0x0c, 0x85, 0xbc, 0xaf, 0x54, 0x82, 0xca, 0xea, 0x25, 0xa6, 0xd2, 0xd5, 0xfe,
	0xd2, 0x15, 0x6f, 0x5f, 0x37, 0x7a, 0x1b, 0x0d, 0x5d, 0x93, 0xb7, 0xdf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x17, 0x7d, 0x93, 0x80, 0x92, 0x01, 0x00, 0x00,
}

func (m *Loan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Loan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Loan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hf != 0 {
		i = encodeVarintLoan(dAtA, i, uint64(m.Hf))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Liquidator) > 0 {
		i -= len(m.Liquidator)
		copy(dAtA[i:], m.Liquidator)
		i = encodeVarintLoan(dAtA, i, uint64(len(m.Liquidator)))
		i--
		dAtA[i] = 0x42
	}
	if m.Liquidation {
		i--
		if m.Liquidation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.AmountOut) > 0 {
		i -= len(m.AmountOut)
		copy(dAtA[i:], m.AmountOut)
		i = encodeVarintLoan(dAtA, i, uint64(len(m.AmountOut)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OracleTicker) > 0 {
		i -= len(m.OracleTicker)
		copy(dAtA[i:], m.OracleTicker)
		i = encodeVarintLoan(dAtA, i, uint64(len(m.OracleTicker)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintLoan(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Borrower) > 0 {
		i -= len(m.Borrower)
		copy(dAtA[i:], m.Borrower)
		i = encodeVarintLoan(dAtA, i, uint64(len(m.Borrower)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintLoan(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLoan(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLoan(dAtA []byte, offset int, v uint64) int {
	offset -= sovLoan(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Loan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLoan(uint64(m.Id))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovLoan(uint64(l))
	}
	l = len(m.Borrower)
	if l > 0 {
		n += 1 + l + sovLoan(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovLoan(uint64(l))
	}
	l = len(m.OracleTicker)
	if l > 0 {
		n += 1 + l + sovLoan(uint64(l))
	}
	l = len(m.AmountOut)
	if l > 0 {
		n += 1 + l + sovLoan(uint64(l))
	}
	if m.Liquidation {
		n += 2
	}
	l = len(m.Liquidator)
	if l > 0 {
		n += 1 + l + sovLoan(uint64(l))
	}
	if m.Hf != 0 {
		n += 1 + sovLoan(uint64(m.Hf))
	}
	return n
}

func sovLoan(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLoan(x uint64) (n int) {
	return sovLoan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Loan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Borrower = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleTicker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleTicker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Liquidation = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hf", wireType)
			}
			m.Hf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hf |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLoan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLoan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLoan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLoan
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLoan
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLoan
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLoan        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLoan          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLoan = fmt.Errorf("proto: unexpected end of group")
)
