// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core/grow/v1beta1/lend.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Position struct {
	Id                  uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator             string   `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	DepositId           string   `protobuf:"bytes,3,opt,name=depositId,proto3" json:"depositId,omitempty"`
	Collateral          string   `protobuf:"bytes,4,opt,name=collateral,proto3" json:"collateral,omitempty"`
	OracleTicker        string   `protobuf:"bytes,5,opt,name=oracleTicker,proto3" json:"oracleTicker,omitempty"`
	BorrowedAmountInUSD uint64   `protobuf:"varint,6,opt,name=borrowedAmountInUSD,proto3" json:"borrowedAmountInUSD,omitempty"`
	LoanIds             []string `protobuf:"bytes,7,rep,name=loanIds,proto3" json:"loanIds,omitempty"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_40e061db2edc1239, []int{0}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return m.Size()
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Position) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Position) GetDepositId() string {
	if m != nil {
		return m.DepositId
	}
	return ""
}

func (m *Position) GetCollateral() string {
	if m != nil {
		return m.Collateral
	}
	return ""
}

func (m *Position) GetOracleTicker() string {
	if m != nil {
		return m.OracleTicker
	}
	return ""
}

func (m *Position) GetBorrowedAmountInUSD() uint64 {
	if m != nil {
		return m.BorrowedAmountInUSD
	}
	return 0
}

func (m *Position) GetLoanIds() []string {
	if m != nil {
		return m.LoanIds
	}
	return nil
}

type LendAsset struct {
	Id            uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LendAssetId   string         `protobuf:"bytes,2,opt,name=LendAssetId,proto3" json:"LendAssetId,omitempty"`
	AssetMetadata types.Metadata `protobuf:"bytes,3,opt,name=assetMetadata,proto3" json:"assetMetadata" yaml:"assetMetadata"`
	OracleAssetId string         `protobuf:"bytes,4,opt,name=oracleAssetId,proto3" json:"oracleAssetId,omitempty"`
	LendRate      uint64         `protobuf:"varint,5,opt,name=LendRate,proto3" json:"LendRate,omitempty"`
}

func (m *LendAsset) Reset()         { *m = LendAsset{} }
func (m *LendAsset) String() string { return proto.CompactTextString(m) }
func (*LendAsset) ProtoMessage()    {}
func (*LendAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_40e061db2edc1239, []int{1}
}
func (m *LendAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LendAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LendAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LendAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LendAsset.Merge(m, src)
}
func (m *LendAsset) XXX_Size() int {
	return m.Size()
}
func (m *LendAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_LendAsset.DiscardUnknown(m)
}

var xxx_messageInfo_LendAsset proto.InternalMessageInfo

func (m *LendAsset) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LendAsset) GetLendAssetId() string {
	if m != nil {
		return m.LendAssetId
	}
	return ""
}

func (m *LendAsset) GetAssetMetadata() types.Metadata {
	if m != nil {
		return m.AssetMetadata
	}
	return types.Metadata{}
}

func (m *LendAsset) GetOracleAssetId() string {
	if m != nil {
		return m.OracleAssetId
	}
	return ""
}

func (m *LendAsset) GetLendRate() uint64 {
	if m != nil {
		return m.LendRate
	}
	return 0
}

func init() {
	proto.RegisterType((*Position)(nil), "core.grow.v1beta1.Position")
	proto.RegisterType((*LendAsset)(nil), "core.grow.v1beta1.LendAsset")
}

func init() { proto.RegisterFile("core/grow/v1beta1/lend.proto", fileDescriptor_40e061db2edc1239) }

var fileDescriptor_40e061db2edc1239 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xb1, 0x8e, 0xd3, 0x40,
	0x10, 0x86, 0xed, 0x5c, 0xb8, 0xbb, 0xec, 0x71, 0x48, 0x2c, 0x57, 0xac, 0xa2, 0xb0, 0x67, 0x59,
	0x14, 0xa9, 0x6c, 0x0e, 0x3a, 0xba, 0x8b, 0x68, 0x2c, 0x81, 0x00, 0x03, 0x0d, 0xdd, 0xd8, 0xbb,
	0x32, 0x56, 0x6c, 0x4f, 0xb4, 0xde, 0x10, 0xf2, 0x16, 0x3c, 0x56, 0xca, 0x94, 0x54, 0x11, 0x72,
	0xde, 0x80, 0x27, 0x40, 0xbb, 0x76, 0x42, 0x2c, 0xe8, 0x76, 0xe6, 0x9b, 0x1d, 0xfd, 0xff, 0xaf,
	0x21, 0x93, 0x14, 0x95, 0x0c, 0x33, 0x85, 0xab, 0xf0, 0xdb, 0x5d, 0x22, 0x35, 0xdc, 0x85, 0x85,
	0xac, 0x44, 0xb0, 0x50, 0xa8, 0x91, 0x3e, 0x36, 0x34, 0x30, 0x34, 0xe8, 0xe8, 0xf8, 0x26, 0xc3,
	0x0c, 0x2d, 0x0d, 0xcd, 0xab, 0x1d, 0x1c, 0xf3, 0x14, 0xeb, 0x12, 0xeb, 0x30, 0x81, 0x6a, 0x7e,
	0x5c, 0x64, 0x8a, 0x96, 0xfb, 0x8d, 0x4b, 0x2e, 0xdf, 0x63, 0x9d, 0xeb, 0x1c, 0x2b, 0xfa, 0x88,
	0x0c, 0x72, 0xc1, 0x5c, 0xcf, 0x9d, 0x0e, 0xe3, 0x41, 0x2e, 0x28, 0x23, 0x17, 0xa9, 0x92, 0xa0,
	0x51, 0xb1, 0x81, 0xe7, 0x4e, 0x47, 0xf1, 0xa1, 0xa4, 0x13, 0x32, 0x12, 0x72, 0x61, 0xfe, 0x45,
	0x82, 0x9d, 0x59, 0xf6, 0xb7, 0x41, 0x39, 0x21, 0x29, 0x16, 0x05, 0x68, 0xa9, 0xa0, 0x60, 0x43,
	0x8b, 0x4f, 0x3a, 0xd4, 0x27, 0x0f, 0x51, 0x41, 0x5a, 0xc8, 0x4f, 0x79, 0x3a, 0x97, 0x8a, 0x3d,
	0xb0, 0x13, 0xbd, 0x1e, 0x7d, 0x4e, 0x9e, 0x24, 0xa8, 0x14, 0xae, 0xa4, 0xb8, 0x2f, 0x71, 0x59,
	0xe9, 0xa8, 0xfa, 0xfc, 0xf1, 0x35, 0x3b, 0xb7, 0xe2, 0xfe, 0x87, 0x8c, 0xda, 0x02, 0xa1, 0x8a,
	0x44, 0xcd, 0x2e, 0xbc, 0x33, 0xa3, 0xb6, 0x2b, 0x8d, 0xc9, 0xd1, 0x1b, 0x59, 0x89, 0xfb, 0xba,
	0x96, 0xfa, 0x1f, 0x97, 0x1e, 0xb9, 0x3a, 0xc2, 0x48, 0x74, 0x4e, 0x4f, 0x5b, 0x14, 0xc8, 0x35,
	0x98, 0xe7, 0x5b, 0xa9, 0x41, 0x80, 0x06, 0xeb, 0xf8, 0xea, 0xc5, 0xd3, 0xa0, 0x0d, 0x37, 0xb0,
	0x79, 0x76, 0xe1, 0x06, 0x87, 0xa1, 0xd9, 0x64, 0xb3, 0xbb, 0x75, 0x7e, 0xef, 0x6e, 0x6f, 0xd6,
	0x50, 0x16, 0xaf, 0xfc, 0xde, 0x06, 0x3f, 0xee, 0x6f, 0xa4, 0xcf, 0xc8, 0x75, 0x6b, 0xff, 0x20,
	0xa3, 0x4d, 0xad, 0xdf, 0xa4, 0x63, 0x72, 0x69, 0x74, 0xc5, 0xa0, 0xa5, 0x0d, 0x6d, 0x18, 0x1f,
	0xeb, 0xd9, 0x6c, 0xd3, 0x70, 0x77, 0xdb, 0x70, 0xf7, 0x57, 0xc3, 0xdd, 0x1f, 0x7b, 0xee, 0x6c,
	0xf7, 0xdc, 0xf9, 0xb9, 0xe7, 0xce, 0x97, 0x69, 0x96, 0xeb, 0xaf, 0xcb, 0x24, 0x48, 0xb1, 0x0c,
	0x3f, 0x2c, 0x41, 0x28, 0xd0, 0xf2, 0x9d, 0xca, 0x42, 0x7b, 0x61, 0xdf, 0xdb, 0x1b, 0xd3, 0xeb,
	0x85, 0xac, 0x93, 0x73, 0x7b, 0x14, 0x2f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x51, 0x56,
	0x82, 0x7d, 0x02, 0x00, 0x00,
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoanIds) > 0 {
		for iNdEx := len(m.LoanIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LoanIds[iNdEx])
			copy(dAtA[i:], m.LoanIds[iNdEx])
			i = encodeVarintLend(dAtA, i, uint64(len(m.LoanIds[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.BorrowedAmountInUSD != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.BorrowedAmountInUSD))
		i--
		dAtA[i] = 0x30
	}
	if len(m.OracleTicker) > 0 {
		i -= len(m.OracleTicker)
		copy(dAtA[i:], m.OracleTicker)
		i = encodeVarintLend(dAtA, i, uint64(len(m.OracleTicker)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Collateral) > 0 {
		i -= len(m.Collateral)
		copy(dAtA[i:], m.Collateral)
		i = encodeVarintLend(dAtA, i, uint64(len(m.Collateral)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DepositId) > 0 {
		i -= len(m.DepositId)
		copy(dAtA[i:], m.DepositId)
		i = encodeVarintLend(dAtA, i, uint64(len(m.DepositId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLend(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LendAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LendAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LendAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LendRate != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.LendRate))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OracleAssetId) > 0 {
		i -= len(m.OracleAssetId)
		copy(dAtA[i:], m.OracleAssetId)
		i = encodeVarintLend(dAtA, i, uint64(len(m.OracleAssetId)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.AssetMetadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.LendAssetId) > 0 {
		i -= len(m.LendAssetId)
		copy(dAtA[i:], m.LendAssetId)
		i = encodeVarintLend(dAtA, i, uint64(len(m.LendAssetId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLend(dAtA []byte, offset int, v uint64) int {
	offset -= sovLend(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLend(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	l = len(m.DepositId)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	l = len(m.Collateral)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	l = len(m.OracleTicker)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	if m.BorrowedAmountInUSD != 0 {
		n += 1 + sovLend(uint64(m.BorrowedAmountInUSD))
	}
	if len(m.LoanIds) > 0 {
		for _, s := range m.LoanIds {
			l = len(s)
			n += 1 + l + sovLend(uint64(l))
		}
	}
	return n
}

func (m *LendAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLend(uint64(m.Id))
	}
	l = len(m.LendAssetId)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	l = m.AssetMetadata.Size()
	n += 1 + l + sovLend(uint64(l))
	l = len(m.OracleAssetId)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	if m.LendRate != 0 {
		n += 1 + sovLend(uint64(m.LendRate))
	}
	return n
}

func sovLend(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLend(x uint64) (n int) {
	return sovLend(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collateral = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleTicker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleTicker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowedAmountInUSD", wireType)
			}
			m.BorrowedAmountInUSD = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorrowedAmountInUSD |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanIds = append(m.LoanIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LendAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LendAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LendAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LendAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LendAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssetMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LendRate", wireType)
			}
			m.LendRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LendRate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLend(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLend
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLend
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLend
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLend
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLend        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLend          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLend = fmt.Errorf("proto: unexpected end of group")
)
