// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core/grow/v1beta1/pair.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GTokenPair struct {
	Id                          uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DenomID                     string                                 `protobuf:"bytes,2,opt,name=denomID,proto3" json:"denomID,omitempty"`
	QStablePairId               string                                 `protobuf:"bytes,3,opt,name=qStablePairId,proto3" json:"qStablePairId,omitempty"`
	GTokenMetadata              types.Metadata                         `protobuf:"bytes,4,opt,name=gTokenMetadata,proto3" json:"gTokenMetadata" yaml:"gTokenMetadata"`
	MinAmountIn                 string                                 `protobuf:"bytes,5,opt,name=minAmountIn,proto3" json:"minAmountIn,omitempty"`
	MinAmountOut                string                                 `protobuf:"bytes,6,opt,name=minAmountOut,proto3" json:"minAmountOut,omitempty"`
	GTokenLastPrice             github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=gTokenLastPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"gTokenLastPrice" yaml:"gTokenLastPrice"`
	GTokenLatestPriceUpdateTime uint64                                 `protobuf:"varint,9,opt,name=gTokenLatestPriceUpdateTime,proto3" json:"gTokenLatestPriceUpdateTime,omitempty"`
	St                          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,opt,name=st,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"st" yaml:"st"`
	RealRate                    uint64                                 `protobuf:"varint,11,opt,name=RealRate,proto3" json:"RealRate,omitempty"`
	BorrowRate                  uint64                                 `protobuf:"varint,12,opt,name=BorrowRate,proto3" json:"BorrowRate,omitempty"`
}

func (m *GTokenPair) Reset()         { *m = GTokenPair{} }
func (m *GTokenPair) String() string { return proto.CompactTextString(m) }
func (*GTokenPair) ProtoMessage()    {}
func (*GTokenPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc07b85d2fa40eb, []int{0}
}
func (m *GTokenPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GTokenPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GTokenPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GTokenPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GTokenPair.Merge(m, src)
}
func (m *GTokenPair) XXX_Size() int {
	return m.Size()
}
func (m *GTokenPair) XXX_DiscardUnknown() {
	xxx_messageInfo_GTokenPair.DiscardUnknown(m)
}

var xxx_messageInfo_GTokenPair proto.InternalMessageInfo

func (m *GTokenPair) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GTokenPair) GetDenomID() string {
	if m != nil {
		return m.DenomID
	}
	return ""
}

func (m *GTokenPair) GetQStablePairId() string {
	if m != nil {
		return m.QStablePairId
	}
	return ""
}

func (m *GTokenPair) GetGTokenMetadata() types.Metadata {
	if m != nil {
		return m.GTokenMetadata
	}
	return types.Metadata{}
}

func (m *GTokenPair) GetMinAmountIn() string {
	if m != nil {
		return m.MinAmountIn
	}
	return ""
}

func (m *GTokenPair) GetMinAmountOut() string {
	if m != nil {
		return m.MinAmountOut
	}
	return ""
}

func (m *GTokenPair) GetGTokenLatestPriceUpdateTime() uint64 {
	if m != nil {
		return m.GTokenLatestPriceUpdateTime
	}
	return 0
}

func (m *GTokenPair) GetRealRate() uint64 {
	if m != nil {
		return m.RealRate
	}
	return 0
}

func (m *GTokenPair) GetBorrowRate() uint64 {
	if m != nil {
		return m.BorrowRate
	}
	return 0
}

func init() {
	proto.RegisterType((*GTokenPair)(nil), "core.grow.v1beta1.gTokenPair")
}

func init() { proto.RegisterFile("core/grow/v1beta1/pair.proto", fileDescriptor_0cc07b85d2fa40eb) }

var fileDescriptor_0cc07b85d2fa40eb = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x86, 0x9b, 0x50, 0x36, 0xfa, 0x75, 0x0c, 0x61, 0x01, 0xb2, 0x0a, 0x4b, 0xab, 0x08, 0xa1,
	0x5e, 0x88, 0x35, 0xb8, 0xc1, 0x05, 0x22, 0x0e, 0x54, 0x80, 0x36, 0xc2, 0xb8, 0x70, 0x73, 0x6a,
	0x2b, 0x58, 0x6d, 0xe2, 0x62, 0x7f, 0x65, 0xec, 0x5f, 0xf0, 0xaf, 0xd8, 0x71, 0x47, 0xc4, 0xa1,
	0x42, 0xed, 0x3f, 0xd8, 0x2f, 0x40, 0xb1, 0xdb, 0xaa, 0xdd, 0x01, 0x69, 0xa7, 0xe4, 0x7b, 0xdf,
	0x37, 0xaf, 0x1f, 0xc5, 0x1f, 0x3c, 0x1a, 0x6a, 0x23, 0x59, 0x61, 0xf4, 0x29, 0xfb, 0x7e, 0x98,
	0x4b, 0xe4, 0x87, 0x6c, 0xc2, 0x95, 0x49, 0x26, 0x46, 0xa3, 0x26, 0x77, 0x6b, 0x37, 0xa9, 0xdd,
	0x64, 0xe9, 0x76, 0xee, 0x15, 0xba, 0xd0, 0xce, 0x65, 0xf5, 0x9b, 0x0f, 0x76, 0xa2, 0xa1, 0xb6,
	0xa5, 0xb6, 0x2c, 0xe7, 0xd5, 0x68, 0x5d, 0x54, 0x0f, 0xde, 0x8f, 0x7f, 0x35, 0x01, 0x8a, 0x13,
	0x3d, 0x92, 0xd5, 0x31, 0x57, 0x86, 0xec, 0x43, 0xa8, 0x04, 0x0d, 0x7a, 0x41, 0xbf, 0x99, 0x85,
	0x4a, 0x10, 0x0a, 0xbb, 0x42, 0x56, 0xba, 0x1c, 0xbc, 0xa1, 0x61, 0x2f, 0xe8, 0xb7, 0xb2, 0xd5,
	0x48, 0x1e, 0xc3, 0xed, 0x6f, 0x9f, 0x90, 0xe7, 0x63, 0x59, 0x7f, 0x38, 0x10, 0xf4, 0x86, 0xf3,
	0xb7, 0x45, 0x22, 0x60, 0xdf, 0xb7, 0x7f, 0x90, 0xc8, 0x05, 0x47, 0x4e, 0x9b, 0xbd, 0xa0, 0xdf,
	0x7e, 0x76, 0x90, 0x78, 0xae, 0xc4, 0xa1, 0x2c, 0xb9, 0x92, 0x55, 0x28, 0x3d, 0x38, 0x9f, 0x75,
	0x1b, 0x97, 0xb3, 0xee, 0xfd, 0x33, 0x5e, 0x8e, 0x5f, 0xc4, 0xdb, 0x15, 0x71, 0x76, 0xa5, 0x93,
	0xf4, 0xa0, 0x5d, 0xaa, 0xea, 0x75, 0xa9, 0xa7, 0x15, 0x0e, 0x2a, 0x7a, 0xd3, 0x91, 0x6c, 0x4a,
	0x24, 0x86, 0xbd, 0xf5, 0x78, 0x34, 0x45, 0xba, 0xe3, 0x22, 0x5b, 0x1a, 0x31, 0x70, 0xc7, 0xf7,
	0xbe, 0xe7, 0x16, 0x8f, 0x8d, 0x1a, 0x4a, 0xba, 0x5b, 0xc7, 0xd2, 0xb7, 0x35, 0xcd, 0x9f, 0x59,
	0xf7, 0x49, 0xa1, 0xf0, 0xeb, 0x34, 0x4f, 0x86, 0xba, 0x64, 0xcb, 0xdf, 0xea, 0x1f, 0x4f, 0xad,
	0x18, 0x31, 0x3c, 0x9b, 0x48, 0x9b, 0x0c, 0x2a, 0xbc, 0x9c, 0x75, 0x1f, 0x6c, 0x72, 0xaf, 0xeb,
	0xe2, 0xec, 0xea, 0x01, 0xe4, 0x15, 0x3c, 0x5c, 0x49, 0x28, 0x97, 0xe2, 0xe7, 0x89, 0xe0, 0x28,
	0x4f, 0x54, 0x29, 0x69, 0xcb, 0x5d, 0xc4, 0xff, 0x22, 0xe4, 0x1d, 0x84, 0x16, 0x29, 0x38, 0xd0,
	0x97, 0xd7, 0x06, 0x6d, 0x79, 0x50, 0x8b, 0x71, 0x16, 0x5a, 0x24, 0x1d, 0xb8, 0x95, 0x49, 0x3e,
	0xce, 0x38, 0x4a, 0xda, 0x76, 0x67, 0xaf, 0x67, 0x12, 0x01, 0xa4, 0xda, 0x18, 0x7d, 0xea, 0xdc,
	0x3d, 0xe7, 0x6e, 0x28, 0x69, 0x7a, 0x3e, 0x8f, 0x82, 0x8b, 0x79, 0x14, 0xfc, 0x9d, 0x47, 0xc1,
	0xcf, 0x45, 0xd4, 0xb8, 0x58, 0x44, 0x8d, 0xdf, 0x8b, 0xa8, 0xf1, 0xa5, 0xbf, 0x81, 0xf3, 0x71,
	0xca, 0x85, 0xe1, 0x28, 0x8f, 0x4c, 0xc1, 0xdc, 0x86, 0xff, 0xf0, 0x3b, 0xee, 0xa0, 0xf2, 0x1d,
	0xb7, 0x94, 0xcf, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x28, 0x2d, 0xcf, 0xf4, 0xfd, 0x02, 0x00,
	0x00,
}

func (m *GTokenPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GTokenPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GTokenPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BorrowRate != 0 {
		i = encodeVarintPair(dAtA, i, uint64(m.BorrowRate))
		i--
		dAtA[i] = 0x60
	}
	if m.RealRate != 0 {
		i = encodeVarintPair(dAtA, i, uint64(m.RealRate))
		i--
		dAtA[i] = 0x58
	}
	{
		size := m.St.Size()
		i -= size
		if _, err := m.St.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if m.GTokenLatestPriceUpdateTime != 0 {
		i = encodeVarintPair(dAtA, i, uint64(m.GTokenLatestPriceUpdateTime))
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.GTokenLastPrice.Size()
		i -= size
		if _, err := m.GTokenLastPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.MinAmountOut) > 0 {
		i -= len(m.MinAmountOut)
		copy(dAtA[i:], m.MinAmountOut)
		i = encodeVarintPair(dAtA, i, uint64(len(m.MinAmountOut)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MinAmountIn) > 0 {
		i -= len(m.MinAmountIn)
		copy(dAtA[i:], m.MinAmountIn)
		i = encodeVarintPair(dAtA, i, uint64(len(m.MinAmountIn)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.GTokenMetadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPair(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.QStablePairId) > 0 {
		i -= len(m.QStablePairId)
		copy(dAtA[i:], m.QStablePairId)
		i = encodeVarintPair(dAtA, i, uint64(len(m.QStablePairId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DenomID) > 0 {
		i -= len(m.DenomID)
		copy(dAtA[i:], m.DenomID)
		i = encodeVarintPair(dAtA, i, uint64(len(m.DenomID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPair(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPair(dAtA []byte, offset int, v uint64) int {
	offset -= sovPair(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GTokenPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPair(uint64(m.Id))
	}
	l = len(m.DenomID)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	l = len(m.QStablePairId)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	l = m.GTokenMetadata.Size()
	n += 1 + l + sovPair(uint64(l))
	l = len(m.MinAmountIn)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	l = len(m.MinAmountOut)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	l = m.GTokenLastPrice.Size()
	n += 1 + l + sovPair(uint64(l))
	if m.GTokenLatestPriceUpdateTime != 0 {
		n += 1 + sovPair(uint64(m.GTokenLatestPriceUpdateTime))
	}
	l = m.St.Size()
	n += 1 + l + sovPair(uint64(l))
	if m.RealRate != 0 {
		n += 1 + sovPair(uint64(m.RealRate))
	}
	if m.BorrowRate != 0 {
		n += 1 + sovPair(uint64(m.BorrowRate))
	}
	return n
}

func sovPair(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPair(x uint64) (n int) {
	return sovPair(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GTokenPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: gTokenPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: gTokenPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QStablePairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QStablePairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GTokenMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GTokenMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinAmountIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinAmountOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GTokenLastPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GTokenLastPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GTokenLatestPriceUpdateTime", wireType)
			}
			m.GTokenLatestPriceUpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GTokenLatestPriceUpdateTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field St", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.St.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealRate", wireType)
			}
			m.RealRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealRate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowRate", wireType)
			}
			m.BorrowRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorrowRate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPair(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPair
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPair
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPair
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPair
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPair        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPair          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPair = fmt.Errorf("proto: unexpected end of group")
)
