// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core/perpetual/v1beta1/vault.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PerpetualTradeType int32

const (
	PerpetualTradeType_PERPETUAL_LONG_POSITION  PerpetualTradeType = 0
	PerpetualTradeType_PERPETUAL_SHORT_POSITION PerpetualTradeType = 1
)

var PerpetualTradeType_name = map[int32]string{
	0: "PERPETUAL_LONG_POSITION",
	1: "PERPETUAL_SHORT_POSITION",
}

var PerpetualTradeType_value = map[string]int32{
	"PERPETUAL_LONG_POSITION":  0,
	"PERPETUAL_SHORT_POSITION": 1,
}

func (x PerpetualTradeType) String() string {
	return proto.EnumName(PerpetualTradeType_name, int32(x))
}

func (PerpetualTradeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f2cf089a5a346582, []int{0}
}

type Deposit struct {
	Id            uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DepositId     string                                 `protobuf:"bytes,2,opt,name=deposit_id,json=depositId,proto3" json:"deposit_id,omitempty"`
	VaultId       string                                 `protobuf:"bytes,3,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	DepositAmount github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=deposit_amount,json=depositAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"deposit_amount" yaml:"amountout_amount"`
	DepositDenom  string                                 `protobuf:"bytes,5,opt,name=deposit_denom,json=depositDenom,proto3" json:"deposit_denom,omitempty"`
	Time          uint64                                 `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *Deposit) Reset()         { *m = Deposit{} }
func (m *Deposit) String() string { return proto.CompactTextString(m) }
func (*Deposit) ProtoMessage()    {}
func (*Deposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2cf089a5a346582, []int{0}
}
func (m *Deposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deposit.Merge(m, src)
}
func (m *Deposit) XXX_Size() int {
	return m.Size()
}
func (m *Deposit) XXX_DiscardUnknown() {
	xxx_messageInfo_Deposit.DiscardUnknown(m)
}

var xxx_messageInfo_Deposit proto.InternalMessageInfo

func (m *Deposit) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Deposit) GetDepositId() string {
	if m != nil {
		return m.DepositId
	}
	return ""
}

func (m *Deposit) GetVaultId() string {
	if m != nil {
		return m.VaultId
	}
	return ""
}

func (m *Deposit) GetDepositDenom() string {
	if m != nil {
		return m.DepositDenom
	}
	return ""
}

func (m *Deposit) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type Position struct {
	Id              uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PositionId      string                                 `protobuf:"bytes,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	VaultId         string                                 `protobuf:"bytes,3,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	Trader          string                                 `protobuf:"bytes,4,opt,name=trader,proto3" json:"trader,omitempty"`
	Collateral      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=collateral,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"collateral" yaml:"amountout_amount"`
	CollateralDenom string                                 `protobuf:"bytes,6,opt,name=collateral_denom,json=collateralDenom,proto3" json:"collateral_denom,omitempty"`
	ReturnAmount    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=return_amount,json=returnAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"return_amount" yaml:"amountout_amount"`
	ReturnDenom     string                                 `protobuf:"bytes,8,opt,name=return_denom,json=returnDenom,proto3" json:"return_denom,omitempty"`
	EntryPrice      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=entry_price,json=entryPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"entry_price" yaml:"amountout_amount"`
	Leverage        uint64                                 `protobuf:"varint,10,opt,name=leverage,proto3" json:"leverage,omitempty"`
	Time            uint64                                 `protobuf:"varint,11,opt,name=time,proto3" json:"time,omitempty"`
	TradeType       PerpetualTradeType                     `protobuf:"varint,12,opt,name=trade_type,json=tradeType,proto3,enum=core.perpetual.v1beta1.PerpetualTradeType" json:"trade_type,omitempty"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2cf089a5a346582, []int{1}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return m.Size()
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Position) GetPositionId() string {
	if m != nil {
		return m.PositionId
	}
	return ""
}

func (m *Position) GetVaultId() string {
	if m != nil {
		return m.VaultId
	}
	return ""
}

func (m *Position) GetTrader() string {
	if m != nil {
		return m.Trader
	}
	return ""
}

func (m *Position) GetCollateralDenom() string {
	if m != nil {
		return m.CollateralDenom
	}
	return ""
}

func (m *Position) GetReturnDenom() string {
	if m != nil {
		return m.ReturnDenom
	}
	return ""
}

func (m *Position) GetLeverage() uint64 {
	if m != nil {
		return m.Leverage
	}
	return 0
}

func (m *Position) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Position) GetTradeType() PerpetualTradeType {
	if m != nil {
		return m.TradeType
	}
	return PerpetualTradeType_PERPETUAL_LONG_POSITION
}

type Vault struct {
	Id              uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	VaultId         string         `protobuf:"bytes,2,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	AmountXMetadata types.Metadata `protobuf:"bytes,3,opt,name=amountXMetadata,proto3" json:"amountXMetadata" yaml:"amountXMetadata"`
	AmountYMetadata types.Metadata `protobuf:"bytes,4,opt,name=amountYMetadata,proto3" json:"amountYMetadata" yaml:"amountYMetadata"`
	X               uint64         `protobuf:"varint,5,opt,name=x,proto3" json:"x,omitempty"`
	Y               uint64         `protobuf:"varint,6,opt,name=y,proto3" json:"y,omitempty"`
	K               uint64         `protobuf:"varint,7,opt,name=k,proto3" json:"k,omitempty"`
	Deposits        []*Deposit     `protobuf:"bytes,8,rep,name=deposits,proto3" json:"deposits,omitempty"`
	Positions       []*Position    `protobuf:"bytes,9,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (m *Vault) Reset()         { *m = Vault{} }
func (m *Vault) String() string { return proto.CompactTextString(m) }
func (*Vault) ProtoMessage()    {}
func (*Vault) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2cf089a5a346582, []int{2}
}
func (m *Vault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vault.Merge(m, src)
}
func (m *Vault) XXX_Size() int {
	return m.Size()
}
func (m *Vault) XXX_DiscardUnknown() {
	xxx_messageInfo_Vault.DiscardUnknown(m)
}

var xxx_messageInfo_Vault proto.InternalMessageInfo

func (m *Vault) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Vault) GetVaultId() string {
	if m != nil {
		return m.VaultId
	}
	return ""
}

func (m *Vault) GetAmountXMetadata() types.Metadata {
	if m != nil {
		return m.AmountXMetadata
	}
	return types.Metadata{}
}

func (m *Vault) GetAmountYMetadata() types.Metadata {
	if m != nil {
		return m.AmountYMetadata
	}
	return types.Metadata{}
}

func (m *Vault) GetX() uint64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vault) GetY() uint64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Vault) GetK() uint64 {
	if m != nil {
		return m.K
	}
	return 0
}

func (m *Vault) GetDeposits() []*Deposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

func (m *Vault) GetPositions() []*Position {
	if m != nil {
		return m.Positions
	}
	return nil
}

func init() {
	proto.RegisterEnum("core.perpetual.v1beta1.PerpetualTradeType", PerpetualTradeType_name, PerpetualTradeType_value)
	proto.RegisterType((*Deposit)(nil), "core.perpetual.v1beta1.Deposit")
	proto.RegisterType((*Position)(nil), "core.perpetual.v1beta1.Position")
	proto.RegisterType((*Vault)(nil), "core.perpetual.v1beta1.Vault")
}

func init() {
	proto.RegisterFile("core/perpetual/v1beta1/vault.proto", fileDescriptor_f2cf089a5a346582)
}

var fileDescriptor_f2cf089a5a346582 = []byte{
	// 696 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0xd3, 0x34, 0x4d, 0x26, 0xe9, 0x8f, 0x56, 0xa8, 0x35, 0x85, 0x3a, 0xc1, 0x48, 0x28,
	0x54, 0xaa, 0xad, 0x96, 0x1b, 0x48, 0x48, 0xad, 0x5a, 0x95, 0x48, 0xa5, 0x09, 0x6e, 0x40, 0x94,
	0x4b, 0xb4, 0x89, 0x57, 0xc1, 0xc4, 0xf1, 0x5a, 0xf6, 0xba, 0x6a, 0xde, 0x82, 0xf7, 0xe0, 0x45,
	0x7a, 0xec, 0x11, 0x71, 0x88, 0x50, 0xfb, 0x06, 0x7d, 0x80, 0x0a, 0xed, 0x7a, 0x6d, 0x07, 0x42,
	0x39, 0xa0, 0x9e, 0xb2, 0xf3, 0xb3, 0x33, 0xdf, 0x7e, 0xf3, 0x4d, 0x0c, 0x7a, 0x9f, 0x06, 0xc4,
	0xf4, 0x49, 0xe0, 0x13, 0x16, 0x61, 0xd7, 0x3c, 0xdb, 0xee, 0x11, 0x86, 0xb7, 0xcd, 0x33, 0x1c,
	0xb9, 0xcc, 0xf0, 0x03, 0xca, 0x28, 0x5a, 0xe5, 0x39, 0x46, 0x9a, 0x63, 0xc8, 0x9c, 0xf5, 0x07,
	0x03, 0x3a, 0xa0, 0x22, 0xc5, 0xe4, 0xa7, 0x38, 0x7b, 0x5d, 0xeb, 0xd3, 0x70, 0x44, 0x43, 0xb3,
	0x87, 0xbd, 0x61, 0x5a, 0x8e, 0x1b, 0x71, 0x5c, 0xbf, 0x55, 0x60, 0x61, 0x9f, 0xf8, 0x34, 0x74,
	0x18, 0x5a, 0x82, 0xbc, 0x63, 0xab, 0x4a, 0x5d, 0x69, 0x14, 0xac, 0xbc, 0x63, 0xa3, 0x0d, 0x00,
	0x3b, 0x0e, 0x75, 0x1d, 0x5b, 0xcd, 0xd7, 0x95, 0x46, 0xd9, 0x2a, 0x4b, 0x4f, 0xd3, 0x46, 0x0f,
	0xa1, 0x24, 0x70, 0xf1, 0xe0, 0x9c, 0x08, 0x2e, 0x08, 0xbb, 0x69, 0x23, 0x1f, 0x96, 0x92, 0x9b,
	0x78, 0x44, 0x23, 0x8f, 0xa9, 0x05, 0x9e, 0xb0, 0xd7, 0xbc, 0x98, 0xd4, 0x72, 0x3f, 0x26, 0xb5,
	0x67, 0x03, 0x87, 0x7d, 0x8e, 0x7a, 0x46, 0x9f, 0x8e, 0x4c, 0x09, 0x30, 0xfe, 0xd9, 0x0a, 0xed,
	0xa1, 0xc9, 0xc6, 0x3e, 0x09, 0x8d, 0x7d, 0xd2, 0xbf, 0x99, 0xd4, 0xd6, 0xc6, 0x78, 0xe4, 0xbe,
	0xd4, 0xe3, 0x2a, 0x34, 0x4a, 0xea, 0xe9, 0xd6, 0xa2, 0x6c, 0xb0, 0x2b, 0x6c, 0xf4, 0x14, 0x12,
	0x47, 0xd7, 0x26, 0x1e, 0x1d, 0xa9, 0xf3, 0x02, 0x51, 0x55, 0x3a, 0xf7, 0xb9, 0x0f, 0x21, 0x28,
	0x30, 0x67, 0x44, 0xd4, 0xa2, 0x78, 0xa2, 0x38, 0xeb, 0xb7, 0x05, 0x28, 0xb5, 0x79, 0x8a, 0x43,
	0xbd, 0x19, 0x06, 0x6a, 0x50, 0xf1, 0x65, 0x2c, 0xa3, 0x00, 0x12, 0xd7, 0xbf, 0x39, 0x58, 0x85,
	0x22, 0x0b, 0xb0, 0x4d, 0x82, 0xf8, 0xed, 0x96, 0xb4, 0x90, 0x03, 0xd0, 0xa7, 0xae, 0x8b, 0x19,
	0x09, 0xb0, 0x1b, 0xc3, 0xbc, 0x4f, 0x5e, 0xa6, 0x8a, 0xa3, 0xe7, 0xb0, 0x92, 0x59, 0x92, 0x97,
	0xa2, 0x00, 0xb3, 0x9c, 0xf9, 0x63, 0x6a, 0x3c, 0x58, 0x0c, 0x08, 0x8b, 0x02, 0x2f, 0x19, 0xd8,
	0xc2, 0x7d, 0x03, 0xab, 0xc6, 0xf5, 0xe5, 0xbc, 0x9e, 0x80, 0xb4, 0x25, 0xac, 0x92, 0x80, 0x55,
	0x89, 0x7d, 0x31, 0xa4, 0x2f, 0x50, 0x21, 0x1e, 0x0b, 0xc6, 0x5d, 0x3f, 0x70, 0xfa, 0x44, 0x2d,
	0xdf, 0x3b, 0x53, 0xa2, 0x7a, 0x9b, 0x17, 0x47, 0xeb, 0x50, 0x72, 0xc9, 0x19, 0x09, 0xf0, 0x80,
	0xa8, 0x20, 0xc6, 0x9f, 0xda, 0xa9, 0x6a, 0x2a, 0x99, 0x6a, 0x50, 0x13, 0x40, 0x8c, 0xb3, 0xcb,
	0x3b, 0xa9, 0xd5, 0xba, 0xd2, 0x58, 0xda, 0xd9, 0x34, 0xfe, 0xbe, 0x99, 0x46, 0x3b, 0xf1, 0x74,
	0xf8, 0x95, 0xce, 0xd8, 0x27, 0x56, 0x99, 0x25, 0x47, 0xfd, 0xdb, 0x1c, 0xcc, 0x7f, 0xe0, 0x9a,
	0x99, 0x51, 0xdf, 0xb4, 0xb8, 0xf2, 0xbf, 0x8b, 0x6b, 0x00, 0xcb, 0xf1, 0x33, 0x3e, 0xbe, 0x25,
	0x0c, 0xdb, 0x98, 0x61, 0x21, 0xbf, 0xca, 0xce, 0x86, 0x11, 0xd3, 0x60, 0x88, 0x1d, 0x4f, 0x10,
	0x24, 0x49, 0x7b, 0x1a, 0xa7, 0xef, 0x66, 0x52, 0x5b, 0x9d, 0x26, 0x25, 0xad, 0xa1, 0x5b, 0x7f,
	0x56, 0xcd, 0x1a, 0x9d, 0xa6, 0x8d, 0x0a, 0xff, 0xdd, 0xe8, 0x74, 0xa6, 0x51, 0xea, 0x41, 0x55,
	0x50, 0xce, 0xc5, 0x36, 0x14, 0x2c, 0xe5, 0x9c, 0x5b, 0x63, 0xb9, 0xa6, 0xca, 0x98, 0x5b, 0x43,
	0x21, 0xc8, 0x82, 0xa5, 0x0c, 0xd1, 0x2b, 0x28, 0xc9, 0xad, 0x0e, 0xd5, 0x52, 0x7d, 0xae, 0x51,
	0xd9, 0xa9, 0xdd, 0xc5, 0xbc, 0xfc, 0x67, 0xb3, 0xd2, 0x0b, 0xe8, 0x35, 0x94, 0x93, 0xf5, 0x0d,
	0xd5, 0xb2, 0xb8, 0x5d, 0xbf, 0x73, 0x6e, 0x32, 0xd1, 0xca, 0xae, 0x6c, 0xb6, 0x00, 0xcd, 0x8e,
	0x13, 0x3d, 0x82, 0xb5, 0xf6, 0x81, 0xd5, 0x3e, 0xe8, 0xbc, 0xdf, 0x3d, 0xea, 0x1e, 0xb5, 0x8e,
	0x0f, 0xbb, 0xed, 0xd6, 0x49, 0xb3, 0xd3, 0x6c, 0x1d, 0xaf, 0xe4, 0xd0, 0x63, 0x50, 0xb3, 0xe0,
	0xc9, 0x9b, 0x96, 0xd5, 0xc9, 0xa2, 0xca, 0xde, 0xe1, 0xc5, 0x95, 0xa6, 0x5c, 0x5e, 0x69, 0xca,
	0xcf, 0x2b, 0x4d, 0xf9, 0x7a, 0xad, 0xe5, 0x2e, 0xaf, 0xb5, 0xdc, 0xf7, 0x6b, 0x2d, 0xf7, 0x69,
	0x6b, 0x4a, 0xe2, 0xef, 0x22, 0x6c, 0x07, 0x98, 0x91, 0x56, 0x30, 0x30, 0xc5, 0x37, 0xe2, 0x7c,
	0xea, 0x2b, 0x21, 0xd4, 0xde, 0x2b, 0x8a, 0x3f, 0xf4, 0x17, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xdc, 0x59, 0xab, 0xcc, 0x44, 0x06, 0x00, 0x00,
}

func (m *Deposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Deposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DepositDenom) > 0 {
		i -= len(m.DepositDenom)
		copy(dAtA[i:], m.DepositDenom)
		i = encodeVarintVault(dAtA, i, uint64(len(m.DepositDenom)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.DepositAmount.Size()
		i -= size
		if _, err := m.DepositAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.VaultId) > 0 {
		i -= len(m.VaultId)
		copy(dAtA[i:], m.VaultId)
		i = encodeVarintVault(dAtA, i, uint64(len(m.VaultId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DepositId) > 0 {
		i -= len(m.DepositId)
		copy(dAtA[i:], m.DepositId)
		i = encodeVarintVault(dAtA, i, uint64(len(m.DepositId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradeType != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.TradeType))
		i--
		dAtA[i] = 0x60
	}
	if m.Time != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x58
	}
	if m.Leverage != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.Leverage))
		i--
		dAtA[i] = 0x50
	}
	{
		size := m.EntryPrice.Size()
		i -= size
		if _, err := m.EntryPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.ReturnDenom) > 0 {
		i -= len(m.ReturnDenom)
		copy(dAtA[i:], m.ReturnDenom)
		i = encodeVarintVault(dAtA, i, uint64(len(m.ReturnDenom)))
		i--
		dAtA[i] = 0x42
	}
	{
		size := m.ReturnAmount.Size()
		i -= size
		if _, err := m.ReturnAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.CollateralDenom) > 0 {
		i -= len(m.CollateralDenom)
		copy(dAtA[i:], m.CollateralDenom)
		i = encodeVarintVault(dAtA, i, uint64(len(m.CollateralDenom)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.Collateral.Size()
		i -= size
		if _, err := m.Collateral.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Trader) > 0 {
		i -= len(m.Trader)
		copy(dAtA[i:], m.Trader)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Trader)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VaultId) > 0 {
		i -= len(m.VaultId)
		copy(dAtA[i:], m.VaultId)
		i = encodeVarintVault(dAtA, i, uint64(len(m.VaultId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PositionId) > 0 {
		i -= len(m.PositionId)
		copy(dAtA[i:], m.PositionId)
		i = encodeVarintVault(dAtA, i, uint64(len(m.PositionId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Vault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVault(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVault(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.K != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.K))
		i--
		dAtA[i] = 0x38
	}
	if m.Y != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x30
	}
	if m.X != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.AmountYMetadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.AmountXMetadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.VaultId) > 0 {
		i -= len(m.VaultId)
		copy(dAtA[i:], m.VaultId)
		i = encodeVarintVault(dAtA, i, uint64(len(m.VaultId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVault(dAtA []byte, offset int, v uint64) int {
	offset -= sovVault(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Deposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovVault(uint64(m.Id))
	}
	l = len(m.DepositId)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.VaultId)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = m.DepositAmount.Size()
	n += 1 + l + sovVault(uint64(l))
	l = len(m.DepositDenom)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovVault(uint64(m.Time))
	}
	return n
}

func (m *Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovVault(uint64(m.Id))
	}
	l = len(m.PositionId)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.VaultId)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.Trader)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = m.Collateral.Size()
	n += 1 + l + sovVault(uint64(l))
	l = len(m.CollateralDenom)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = m.ReturnAmount.Size()
	n += 1 + l + sovVault(uint64(l))
	l = len(m.ReturnDenom)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = m.EntryPrice.Size()
	n += 1 + l + sovVault(uint64(l))
	if m.Leverage != 0 {
		n += 1 + sovVault(uint64(m.Leverage))
	}
	if m.Time != 0 {
		n += 1 + sovVault(uint64(m.Time))
	}
	if m.TradeType != 0 {
		n += 1 + sovVault(uint64(m.TradeType))
	}
	return n
}

func (m *Vault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovVault(uint64(m.Id))
	}
	l = len(m.VaultId)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = m.AmountXMetadata.Size()
	n += 1 + l + sovVault(uint64(l))
	l = m.AmountYMetadata.Size()
	n += 1 + l + sovVault(uint64(l))
	if m.X != 0 {
		n += 1 + sovVault(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovVault(uint64(m.Y))
	}
	if m.K != 0 {
		n += 1 + sovVault(uint64(m.K))
	}
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovVault(uint64(l))
		}
	}
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovVault(uint64(l))
		}
	}
	return n
}

func sovVault(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVault(x uint64) (n int) {
	return sovVault(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Deposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReturnAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EntryPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leverage", wireType)
			}
			m.Leverage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leverage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeType", wireType)
			}
			m.TradeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradeType |= PerpetualTradeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountXMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountXMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountYMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountYMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field K", wireType)
			}
			m.K = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.K |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, &Deposit{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, &Position{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVault(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVault
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVault
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVault
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVault
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVault        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVault          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVault = fmt.Errorf("proto: unexpected end of group")
)
